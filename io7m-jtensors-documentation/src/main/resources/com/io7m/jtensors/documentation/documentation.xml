<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright © 2014 <code@io7m.com> http://io7m.com

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  -->

<s:document
  xmlns:s="http://schemas.io7m.com/structural/2.1.0"
  xmlns:xi="http://www.w3.org/2001/XInclude">
  <s:document-title>${project.parent.name} ${project.version} Documentation</s:document-title>
  <s:document-style>documentation.css</s:document-style>
  <s:document-contents/>

  <s:part xml:id="com.io7m.jtensors.package_info">
    <s:part-title>Package Information</s:part-title>
    <s:part-contents />
    <s:section>
      <s:section-title>Orientation</s:section-title>
      <s:subsection>
        <s:subsection-title>Overview</s:subsection-title>
        <s:paragraph>
          The <s:term s:type="package">${project.parent.name}</s:term> package implements a
          set of efficient vector, matrix, and quaternion classes intended for use
          in computer graphics applications.
        </s:paragraph>
      </s:subsection>

      <s:subsection>
        <s:subsection-title>Efficiency</s:subsection-title>
        <s:paragraph>
          The package uses simple and efficient algorithms for all operations. The
          package also provides matrices that are backed by direct memory, allowing
          for zero-copy sharing of structures with native code.
        </s:paragraph>
        <s:paragraph>
          Many of the matrix functions also provide interfaces that allow for
          preallocation of all storage, reducing garbage collector pressure in
          code with soft-realtime constraints.
        </s:paragraph>
      </s:subsection>

      <s:subsection>
        <s:subsection-title>Correctness</s:subsection-title>
        <s:paragraph>
          The package includes a large battery of automated tests that attempt to verify
          the correctness of the included implementations. As of the time of writing,
          the tests manage 100% coverage for all code.
        </s:paragraph>
      </s:subsection>
    </s:section>

    <s:section>
      <s:section-title>Installation</s:section-title>
      <s:subsection>
        <s:subsection-title>Source compilation</s:subsection-title>
        <s:paragraph>
          The project can be compiled and installed with
          <s:link-external s:target="http://maven.apache.org">Maven</s:link-external>:
        </s:paragraph>
        <s:paragraph>
          <s:verbatim s:type="example"><![CDATA[$ mvn -C clean install]]></s:verbatim>
        </s:paragraph>
      </s:subsection>

      <s:subsection>
        <s:subsection-title>Maven</s:subsection-title>
        <s:paragraph>
          Regular releases are made to the
          <s:link-external s:target="http://search.maven.org/#search%7Cga%7C1%7C${project.parent.name}">Central Repository</s:link-external>,
          so it's possible to use the <s:term s:type="package">${project.parent.name}</s:term>
          package in your projects with the following Maven dependency:
        </s:paragraph>
        <s:paragraph>
          <s:verbatim s:type="example"><![CDATA[<dependency>
  <groupId>${project.groupId}</groupId>
  <artifactId>${project.parent.artifactId}-core</artifactId>
  <version>${project.version}</version>
</dependency>]]></s:verbatim>
        </s:paragraph>
        <s:paragraph>
          All <s:link-external s:target="http://io7m.com">io7m.com</s:link-external>
          packages use Semantic Versioning
          <s:footnote>
            <s:link-external s:target="http://semver.org">http://semver.org</s:link-external>
          </s:footnote>, which implies that it is always safe to use version ranges
          with an exclusive upper bound equal to the next major version - the API of
          the package will not change in a backwards-incompatible manner before the
          next major version.
        </s:paragraph>
      </s:subsection>
    </s:section>

    <s:section>
      <s:section-title>Platform Specific Issues</s:section-title>
      <s:paragraph>
        There are currently no known platform-specific issues.
      </s:paragraph>
    </s:section>

    <s:section>
      <s:section-title>License</s:section-title>
      <s:paragraph>
        All files distributed with the <s:term s:type="package">${project.parent.name}</s:term>
        package are placed under the following license:
        <s:verbatim s:type="license"><![CDATA[Copyright © 2014 <code@io7m.com> http://io7m.com

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.]]>
        </s:verbatim>
      </s:paragraph>
    </s:section>
  </s:part>

  <s:part xml:id="com.io7m.jtensors.conventions">
    <s:part-title>Usage &amp; Conventions</s:part-title>
    <s:part-contents/>

    <s:section xml:id="com.io7m.jtensors.conventions.vectors">
      <s:section-title>Vectors</s:section-title>
      <s:section-contents/>

      <s:subsection xml:id="com.io7m.jtensors.conventions.vectors.types">
        <s:subsection-title>Types</s:subsection-title>
        <s:paragraph>
          The <s:term s:type="package">${project.parent.name}</s:term> package provides vectors with
          single-precision (<s:term s:type="type">float</s:term>) elements,
          double-precision (<s:term s:type="type">double</s:term>) elements,
          integer (<s:term s:type="type">int</s:term>), and
          long integer (<s:term s:type="type">long</s:term>) elements. Each vector type
          is available in two, three, and four element versions. Each vector type is
          available in mutable or immutable versions. The package unambiguously identifies
          the vector types by using the following naming conventions for the types
          (given as a simple
          <s:link-external s:target="http://en.wikipedia.org/wiki/EBNF">EBNF</s:link-external>
          grammar):
        </s:paragraph>
        <s:formal-item s:kind="convention">
          <s:formal-item-title>Vector type naming</s:formal-item-title>
          <s:verbatim><![CDATA[
mutability   = "M" | "I" ;
size         = "2" | "3" | "4" ;
element_type = "I" | "L" | "F" | "D" ;
type         = "Vector" , mutability , size , element_type ;]]>
          </s:verbatim>
        </s:formal-item>
        <s:paragraph>
          A comprehensive list of the available vector types is as follows:
        </s:paragraph>
        <s:formal-item s:kind="listing">
          <s:formal-item-title>Available vector types</s:formal-item-title>
          <s:list-unordered>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorM2D.html">VectorM2D</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorM2F.html">VectorM2F</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorM2I.html">VectorM2I</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorM2L.html">VectorM2L</s:link-external></s:list-item>

            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorM3D.html">VectorM3D</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorM3F.html">VectorM3F</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorM3I.html">VectorM3I</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorM3L.html">VectorM3L</s:link-external></s:list-item>

            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorM4D.html">VectorM4D</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorM4F.html">VectorM4F</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorM4I.html">VectorM4I</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorM4L.html">VectorM4L</s:link-external></s:list-item>

            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorI2D.html">VectorI2D</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorI2F.html">VectorI2F</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorI2I.html">VectorI2I</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorI2L.html">VectorI2L</s:link-external></s:list-item>

            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorI3D.html">VectorI3D</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorI3F.html">VectorI3F</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorI3I.html">VectorI3I</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorI3L.html">VectorI3L</s:link-external></s:list-item>

            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorI4D.html">VectorI4D</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorI4F.html">VectorI4F</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorI4I.html">VectorI4I</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorI4L.html">VectorI4L</s:link-external></s:list-item>
          </s:list-unordered>
        </s:formal-item>
      </s:subsection>

      <s:subsection xml:id="com.io7m.jtensors.conventions.vectors.access">
        <s:subsection-title>Access control</s:subsection-title>
        <s:paragraph>
          If a function only needs to read from a value of a vector type, then
          it would be desirable to be able to statically enforce this fact. Therefore,
          the package provides a set of <s:term s:type="type">Readable</s:term>
          interfaces that all vector types implement. By writing a function that
          takes a value of a type implementing a <s:term s:type="type">Readable</s:term>
          interface, the programmer is implicitly stating that this function does
          not modify the vector.
        </s:paragraph>
        <s:formal-item s:kind="listing">
          <s:formal-item-title>Available vector Readable types</s:formal-item-title>
          <s:list-unordered>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorReadable2IType.html">VectorReadable2IType</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorReadable2FType.html">VectorReadable2FType</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorReadable2DType.html">VectorReadable2DType</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorReadable2LType.html">VectorReadable2LType</s:link-external></s:list-item>

            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorReadable3IType.html">VectorReadable3IType</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorReadable3FType.html">VectorReadable3FType</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorReadable3DType.html">VectorReadable3DType</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorReadable3LType.html">VectorReadable3LType</s:link-external></s:list-item>

            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorReadable4IType.html">VectorReadable4IType</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorReadable4FType.html">VectorReadable4FType</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorReadable4DType.html">VectorReadable4DType</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/VectorReadable4LType.html">VectorReadable4LType</s:link-external></s:list-item>
          </s:list-unordered>
        </s:formal-item>
      </s:subsection>

      <s:subsection xml:id="com.io7m.jtensors.conventions.vectors.phantom_types">
        <s:subsection-title>Phantom types</s:subsection-title>
        <s:paragraph>
          The <s:term s:type="package">${project.parent.name}</s:term> package also provides
          copies of the existing vector types indexed by a
          <s:term s:type="term">phantom type parameter</s:term> in order to
          allow the programmer to make semantically distinct values
          <s:term s:type="term">type-incompatible</s:term>
          <s:footnote>
            See <s:link-external s:target="http://io7m.com/documents/java/tt1-pt/">http://io7m.com/documents/java/tt1-pt/</s:link-external>.
          </s:footnote>.
        </s:paragraph>
        <s:paragraph>
          A comprehensive list of the available vector types is as follows:
        </s:paragraph>
        <s:formal-item s:kind="listing">
          <s:formal-item-title>Available vector types</s:formal-item-title>
          <s:list-unordered>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/parameterized/PVectorM2D.html">PVectorM2D</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/parameterized/PVectorM2F.html">PVectorM2F</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/parameterized/PVectorM2I.html">PVectorM2I</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/parameterized/PVectorM2L.html">PVectorM2L</s:link-external></s:list-item>

            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/parameterized/PVectorM3D.html">PVectorM3D</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/parameterized/PVectorM3F.html">PVectorM3F</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/parameterized/PVectorM3I.html">PVectorM3I</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/parameterized/PVectorM3L.html">PVectorM3L</s:link-external></s:list-item>

            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/parameterized/PVectorM4D.html">PVectorM4D</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/parameterized/PVectorM4F.html">PVectorM4F</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/parameterized/PVectorM4I.html">PVectorM4I</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/parameterized/PVectorM4L.html">PVectorM4L</s:link-external></s:list-item>

            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/parameterized/PVectorI2D.html">PVectorI2D</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/parameterized/PVectorI2F.html">PVectorI2F</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/parameterized/PVectorI2I.html">PVectorI2I</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/parameterized/PVectorI2L.html">PVectorI2L</s:link-external></s:list-item>

            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/parameterized/PVectorI3D.html">PVectorI3D</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/parameterized/PVectorI3F.html">PVectorI3F</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/parameterized/PVectorI3I.html">PVectorI3I</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/parameterized/PVectorI3L.html">PVectorI3L</s:link-external></s:list-item>

            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/parameterized/PVectorI4D.html">PVectorI4D</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/parameterized/PVectorI4F.html">PVectorI4F</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/parameterized/PVectorI4I.html">PVectorI4I</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/parameterized/PVectorI4L.html">PVectorI4L</s:link-external></s:list-item>
          </s:list-unordered>
        </s:formal-item>
      </s:subsection>
    </s:section>

    <s:section xml:id="com.io7m.jtensors.conventions.matrices">
      <s:section-title>Matrices</s:section-title>
      <s:section-contents/>

      <s:subsection xml:id="com.io7m.jtensors.conventions.matrices.types">
        <s:subsection-title>Types</s:subsection-title>
        <s:paragraph>
          The <s:term s:type="package">${project.parent.name}</s:term> package provides only square
          matrix types with single-precision (<s:term s:type="type">float</s:term>) elements,
          and double-precision (<s:term s:type="type">double</s:term>) elements.
          The package unambiguously identifies the matrix types by using the following 
          naming conventions for the types (given as a simple
          <s:link-external s:target="http://en.wikipedia.org/wiki/EBNF">EBNF</s:link-external>
          grammar):
        </s:paragraph>
        <s:formal-item s:kind="convention">
          <s:formal-item-title>Matrix type naming</s:formal-item-title>
          <s:verbatim><![CDATA[
mutability   = "M" | "I" ;
size         = "2x2" | "3x3" | "4x4" ;
element_type = "F" | "D" ;
type         = "Matrix" , mutability , size , element_type ;]]>
          </s:verbatim>
        </s:formal-item>
        <s:paragraph>
          A comprehensive list of the available matrix types is as follows:
        </s:paragraph>
        <s:formal-item s:kind="listing">
          <s:formal-item-title>Available vector types</s:formal-item-title>
          <s:list-unordered>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixM2x2D.html">MatrixM2x2D</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixM2x2F.html">MatrixM2x2F</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixM3x3D.html">MatrixM3x3D</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixM3x3F.html">MatrixM3x3F</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixM4x4D.html">MatrixM4x4D</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixM4x4F.html">MatrixM4x4F</s:link-external></s:list-item>

            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixI2x2D.html">MatrixI2x2D</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixI2x2F.html">MatrixI2x2F</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixI3x3D.html">MatrixI3x3D</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixI3x3F.html">MatrixI3x3F</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixI4x4D.html">MatrixI4x4D</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixI4x4F.html">MatrixI4x4F</s:link-external></s:list-item>
          </s:list-unordered>
        </s:formal-item>
      </s:subsection>

      <s:subsection xml:id="com.io7m.jtensors.conventions.matrices.storage">
        <s:subsection-title>Storage</s:subsection-title>
        <s:paragraph>
          All of the currently available mutable matrix types are stored in direct memory
          <s:footnote>
            See <s:link-external s:target="http://docs.oracle.com/javase/1.5.0/docs/api/java/nio/ByteBuffer.html#allocateDirect(int)">ByteBuffer.allocateDirect(int)</s:link-external>.
          </s:footnote>. This allows for zero-copy passing of the matrix data
          to native code
          <s:footnote>
            Typically, the <s:link-external s:target="http://opengl.org">OpenGL</s:link-external> API.
          </s:footnote>. Use of direct memory does incur an extra cost with regards
          to creation and deletion of matrices, and some functions in the package do
          require temporary matrices in order to work. Therefore, the package provides
          <s:term s:type="type">Context</s:term> types that allow the user to pre-allocate
          storage that the functions can reuse an unlimited number of times. The package
          typically defines one <s:term s:type="type">Context</s:term> type per class.
          See the <s:link-external s:target="apidocs/com/io7m/jtensors/MatrixM4x4D.Context.html">MatrixM4x4D.Context</s:link-external>
          type for a concrete example; any function in the
          <s:link-external s:target="apidocs/com/io7m/jtensors/MatrixM4x4D.html">MatrixM4x4D</s:link-external>
          class that takes a <s:term s:type="type">Context</s:term> as an argument can be
          depended upon not to allocate more memory. Note that the <s:term s:type="type">Context</s:term>
          type cannot be shared across threads and is completely opaque outside of the
          <s:term s:type="package">jtensors</s:term> package.
        </s:paragraph>
        <s:formal-item s:kind="example">
          <s:formal-item-title>Context usage</s:formal-item-title>
          <s:verbatim><![CDATA[MatrixM4x4D.Context context = new MatrixM4x4D.Context();
MatrixM4x4D mi = new MatrixM4x4D();
MatrixM4x4D mo = new MatrixM4x4D();

MatrixM4x4D.invertWithContext(context, mi, mo);
MatrixM4x4D.invertWithContext(context, mo, mi);]]>
          </s:verbatim>
        </s:formal-item>
        <s:paragraph>
          Matrix data is stored in column-major format
          <s:footnote>
            The convention used by most programs using the <s:link-external s:target="http://opengl.org">OpenGL</s:link-external> API.
          </s:footnote>, in whatever is the
          platform's native byte order. For an <s:term s:type="variable">m x m</s:term>
          square matrix, assuming that each element of the matrix uses
          <s:term s:type="variable">n</s:term> bytes, the first byte of the element at
          row <s:term s:type="variable">r</s:term> and column <s:term s:type="variable">c</s:term>
          (assuming <s:term s:type="function">0 &lt;= r &lt; m</s:term> and
          <s:term s:type="function">0 &lt;= c &lt; m</s:term>)
          can be found by <s:term s:type="function">(c * m * n) + (r * n)</s:term>.
        </s:paragraph>
        <s:paragraph>
          As an example, a 4x4 matrix with <s:term s:type="constant">4</s:term>
          byte elements would be stored in memory as shown in the following
          diagram:
        </s:paragraph>
        <s:formal-item s:kind="example">
          <s:formal-item-title>Column-major storage memory layout</s:formal-item-title>
          <s:image s:source="images/memory.png">Column-major storage memory layout</s:image>
        </s:formal-item>
        <s:paragraph>
          So, the element at row <s:term s:type="constant">0</s:term>,
          column <s:term s:type="constant">0</s:term> would be stored in
          bytes <s:term s:type="constant">[0 .. 3]</s:term>. The
          element at row <s:term s:type="constant">1</s:term>, column
          <s:term s:type="constant">0</s:term> would be stored in bytes
          <s:term s:type="constant">[4 .. 7]</s:term>. The
          element at row <s:term s:type="constant">0</s:term>, column
          <s:term s:type="constant">1</s:term> would be stored in bytes
          <s:term s:type="constant">[16 .. 19]</s:term>, and so on.
        </s:paragraph>
        <s:paragraph>
          The immutable matrix types available in the package are not
          backed by direct memory and only offer a small fraction of 
          the functionality of the mutable types. They are essentially
          provided as a way to construct immutable snapshots of a mutable
          matrix in order to, for example, safely transfer matrix values
          across threads without sharing a reference to mutable memory.
        </s:paragraph>
      </s:subsection>

      <s:subsection xml:id="com.io7m.jtensors.conventions.matrices.handedness">
        <s:subsection-title>Rotations &amp; Handedness</s:subsection-title>
        <s:paragraph>
          Any of the matrix functions that deal with rotations
          assume a right-handed coordinate system. This
          matches the system used by <s:link-external
          s:target="http://opengl.org">OpenGL</s:link-external> (and most
          mathematics literature). A right-handed coordinate system
          assumes that if the viewer is standing at the origin and
          looking towards negative infinity on the Z axis, then the
          X axis runs horizontally (left towards negative infinity
          and right towards positive infinity), and the Y axis runs
          vertically (down towards negative infinity and up towards
          positive infinity). The following image demonstrates this
          axis configuration:
        </s:paragraph>
        <s:formal-item s:kind="example">
          <s:formal-item-title>Right-handed coordinate system</s:formal-item-title>
          <s:image s:source="images/axes2.png">Right-handed coordinate system</s:image>
        </s:formal-item>
        <s:paragraph>
          The <s:term s:type="package">${project.parent.name}</s:term> package adheres
          to the convention that a positive rotation around an axis
          represents a counter-clockwise rotation when viewing the
          system along the negative direction of the axis in question.
        </s:paragraph>
        <s:formal-item s:kind="example">
          <s:formal-item-title>Right-handed rotations</s:formal-item-title>
          <s:image s:source="images/rotations.png">Right-handed rotations</s:image>
        </s:formal-item>
        <s:paragraph>
          The package uses the following matrices to define rotations
          around each axis:
        </s:paragraph>
        <s:formal-item s:kind="matrix">
          <s:formal-item-title>Rotation of r radians around the X axis</s:formal-item-title>
          <s:image s:source="images/matrix_rx.png">Rotation of r radians around the X axis</s:image>
        </s:formal-item>
        <s:formal-item s:kind="matrix">
          <s:formal-item-title>Rotation of r radians around the Y axis</s:formal-item-title>
          <s:image s:source="images/matrix_ry.png">Rotation of r radians around the Y axis</s:image>
        </s:formal-item>
        <s:formal-item s:kind="matrix">
          <s:formal-item-title>Rotation of r radians around the Z axis</s:formal-item-title>
          <s:image s:source="images/matrix_rz.png">Rotation of r radians around the Z axis</s:image>
        </s:formal-item>
        <s:paragraph>
          Which results in the following matrix for rotating <s:term
          s:type="variable">r</s:term> radians around the axis given
          by <s:term s:type="constant">(x, y, z)</s:term>, assuming
          <s:term s:type="variable">s = sin(r)</s:term> and <s:term
          s:type="variable">c = cos(r)</s:term>
          <s:footnote>
            See <s:link-external s:target="http://mathfor3dgameprogramming.com">Mathematics
            for 3D Game Programming and Computer
            Graphics</s:link-external> 3rd Edition, section 4.3.1 for the
            derivation.
          </s:footnote>:
        </s:paragraph>
        <s:formal-item s:kind="matrix">
          <s:formal-item-title>Rotation of r radians around an arbitrary axis</s:formal-item-title>
          <s:image s:source="images/rot_matrix.png">Rotation of r radians around an arbitrary axis</s:image>
        </s:formal-item>
      </s:subsection>

      <s:subsection xml:id="com.io7m.jtensors.conventions.matrices.access">
        <s:subsection-title>Access control</s:subsection-title>
        <s:paragraph>
          If a function only needs to read from a value of a matrix type, then
          it would be desirable to be able to statically enforce this fact. Therefore,
          the package provides a set of <s:term s:type="type">Readable</s:term>
          interfaces that all matrix types implement. By writing a function that
          takes a value of a type implementing a <s:term s:type="type">Readable</s:term>
          interface, the programmer is implicitly stating that this function does
          not modify the matrix.
        </s:paragraph>
        <s:formal-item s:kind="listing">
          <s:formal-item-title>Available matrix Readable types</s:formal-item-title>
          <s:list-unordered>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixReadable2x2FType.html">MatrixReadable2x2FType</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixReadable2x2DType.html">MatrixReadable2x2DType</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixReadable3x3FType.html">MatrixReadable3x3FType</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixReadable3x3DType.html">MatrixReadable3x3DType</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixReadable4x4FType.html">MatrixReadable4x4FType</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixReadable4x4DType.html">MatrixReadable4x4DType</s:link-external></s:list-item>
          </s:list-unordered>
        </s:formal-item>
        <s:paragraph>
          If a function needs to write to a value of a matrix type, then
          it would be desirable to be able to statically indicate this fact. Therefore,
          the package provides a set of <s:term s:type="type">Writable</s:term>
          interfaces that all mutable matrix types implement. By writing a function that
          takes a value of a type implementing a <s:term s:type="type">Writable</s:term>
          interface, the programmer is implicitly stating that this function may
          modify the matrix.
        </s:paragraph>
        <s:formal-item s:kind="listing">
          <s:formal-item-title>Available matrix Writable types</s:formal-item-title>
          <s:list-unordered>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixWritable2x2FType.html">MatrixWritable2x2FType</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixWritable2x2DType.html">MatrixWritable2x2DType</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixWritable3x3FType.html">MatrixWritable3x3FType</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixWritable3x3DType.html">MatrixWritable3x3DType</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixWritable4x4FType.html">MatrixWritable4x4FType</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixWritable4x4DType.html">MatrixWritable4x4DType</s:link-external></s:list-item>
          </s:list-unordered>
        </s:formal-item>
        <s:paragraph>
          Finally, if matrices that are backed by direct memory are required
          (in order to pass them directly to native code, for example), the
          programmer can require matrices of a 
          <s:term s:type="type">DirectBuffered</s:term> type.
        </s:paragraph>
        <s:formal-item s:kind="listing">
          <s:formal-item-title>Available matrix DirectBuffered types</s:formal-item-title>
          <s:list-unordered>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixDirectBufferedDType.html">MatrixDirectBufferedDType</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixDirectBufferedFType.html">MatrixDirectBufferedFType</s:link-external></s:list-item>
          </s:list-unordered>
        </s:formal-item>
        <s:paragraph>
          It is also useful for the sizes of matrices to be indicated
          in the types, so the package provides a set of interfaces
          combining the <s:term s:type="type">Readable</s:term> and
          <s:term s:type="type">DirectBuffered</s:term> types.
        </s:paragraph>
        <s:formal-item s:kind="listing">
          <s:formal-item-title>Available matrix DirectReadable types</s:formal-item-title>
          <s:list-unordered>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixDirectReadable2x2FType.html">MatrixDirectReadable2x2FType</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixDirectReadable2x2DType.html">MatrixDirectReadable2x2DType</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixDirectReadable3x3FType.html">MatrixDirectReadable3x3FType</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixDirectReadable3x3DType.html">MatrixDirectReadable3x3DType</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixDirectReadable4x4FType.html">MatrixDirectReadable4x4FType</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/MatrixDirectReadable4x4DType.html">MatrixDirectReadable4x4DType</s:link-external></s:list-item>
          </s:list-unordered>
        </s:formal-item>
      </s:subsection>
      
      <s:subsection xml:id="com.io7m.jtensors.conventions.matrices.phantom_types">
        <s:subsection-title>Phantom Types</s:subsection-title>
        <s:paragraph>
          As with the <s:link s:target="com.io7m.jtensors.conventions.vectors.phantom_types">vector</s:link>
          types, the <s:term s:type="package">${project.parent.name}</s:term> package
          provides copies of all of the existing matrix types (and interfaces) indexed
          by a pair of <s:term s:type="term">phantom type parameters</s:term>.
        </s:paragraph>
        <s:paragraph>
          Conceptually, a matrix can be considered as storing a transform from
          coordinate space <s:term s:type="type">T0</s:term> to space
          <s:term s:type="type">T1</s:term>. For a 4x4 mutable matrix
          in the <s:term s:type="package">${project.parent.name}</s:term> package,
          this is denoted by the type <s:term s:type="type">PMatrixM4x4F&lt;T0,T1></s:term>.
          It then follows that when matrices are concatenated via multiplications,
          their type parameters are translated accordingly. For example,
          a matrix <s:term s:type="type">PMatrixM4x4F&lt;T0,T1></s:term>
          multiplied by a matrix
          <s:term s:type="type">PMatrixM4x4F&lt;T1,T2></s:term> results
          in a matrix of type
          <s:term s:type="type">PMatrixM4x4F&lt;T0,T2></s:term>. Inverting
          a matrix results in a matrix that represents the inverse of the original
          transform that the matrix represented. For example, inverting a matrix of
          type <s:term s:type="type">PMatrixM4x4F&lt;T0,T1></s:term> results
          in a matrix of type
          <s:term s:type="type">PMatrixM4x4F&lt;T1,T0></s:term>.
        </s:paragraph>
        <s:paragraph>
          Type parameters are also translated across multiplications by
          vectors. A multiplication of a vector of type
          <s:term s:type="type">PVectorI4F&lt;T0></s:term> by a matrix of
          type
          <s:term s:type="type">PMatrixM4x4F&lt;T0,T1></s:term> results in
          a vector of type
          <s:term s:type="type">PVectorI4F&lt;T1></s:term>.
        </s:paragraph>
        <s:paragraph>
          Being able to track the types of transforms at this level of detail
          is invaluable when using systems such as OpenGL, where accidentally
          mixing up matrices tends to result in visual anomalies that can be
          extremely hard to track down. By explicitly denoting coordinate spaces
          with empty types, it's possible to statically prevent all bugs involving
          accidentally mixing up matrices. It's also possible to prevent the
          incorrect construction of matrices
          <s:footnote>
            It is common for people to make mistakes with matrix multiplication:
            The order of matrices is effectively the reverse of the order in which 
            the transforms will be applied.
          </s:footnote>. Additionally,
          with each matrix labelled by the type of transform it represents, code becomes
          self-documenting.
        </s:paragraph>
        <s:formal-item s:kind="example">
          <s:formal-item-title>Static tracking of transforms</s:formal-item-title>
          <s:verbatim><![CDATA[
interface WorldSpace { }
interface ViewSpace { }
interface ObjectSpace { }

PMatrixM4x4F<ObjectSpace, WorldSpace> matrix_model;
PMatrixM4x4F<WorldSpace, ViewSpace> matrix_view;
PMatrixM4x4F<ObjectSpace, ViewSpace> matrix_modelview;

PMatrixM4x4F.multiply (matrix_view, matrix_model, matrix_modelview);

// Compilation error: The resulting matrix would be of type PMatrixM4x4F<ViewSpace, ObjectSpace>
// PMatrixM4x4F.multiply (matrix_view, matrix_model, matrix_modelview);

PMatrixM4x4F<ViewSpace, WorldSpace> matrix_view_inverse;
PMatrixM4x4F.invertWithContext(context, matrix_view, matrix_view_inverse);
]]></s:verbatim>
        </s:formal-item>
        <s:paragraph>
          Of course, because the type system is unsound, and because the matrices
          are mutable, it is obviously possible to deliberately construct matrices 
          that claim to be of a particular type of transform but nevertheless 
          contain nonsense values. It is, however, difficult to do this accidentally.
          The <s:term s:type="package">${project.parent.name}</s:term> package strives
          to provide a means to prevent accidental errors, and doesn't attempt to
          address deliberate sabotage.
        </s:paragraph>
      </s:subsection>
    </s:section>

    <s:section xml:id="com.io7m.jtensors.conventions.quaternions">
      <s:section-title>Quaternions</s:section-title>
      <s:section-contents/>

      <s:subsection xml:id="com.io7m.jtensors.conventions.quaternions.types">
        <s:subsection-title>Types</s:subsection-title>
        <s:paragraph>
          The <s:term s:type="package">${project.parent.name}</s:term>
          package provides quaternions with single-precision
          (<s:term s:type="type">float</s:term>) elements, and
          double-precision (<s:term s:type="type">double</s:term>)
          elements.  Each quaternion type is available in mutable or
          immutable versions. The package unambiguously identifies
          the quaternion types by using the following naming
          conventions for the types (given as a simple <s:link-external
          s:target="http://en.wikipedia.org/wiki/EBNF">EBNF</s:link-external>
          grammar):
        </s:paragraph>
        <s:formal-item s:kind="convention">
          <s:formal-item-title>Quaternion type naming</s:formal-item-title>
          <s:verbatim><![CDATA[
mutability   = "M" | "I" ;
size         = "4" ;
element_type = "F" | "D" ;
type         = "Quaternion" , mutability , size , element_type ;]]>
          </s:verbatim>
        </s:formal-item>
        <s:paragraph>
          A comprehensive list of the available quaternion types is as follows:
        </s:paragraph>
        <s:formal-item s:kind="listing">
          <s:formal-item-title>Available quaternion types</s:formal-item-title>
          <s:list-unordered>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/QuaternionM4D.html">QuaternionM4D</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/QuaternionM4F.html">QuaternionM4F</s:link-external></s:list-item>

            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/QuaternionI4D.html">QuaternionI4D</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/QuaternionI4F.html">QuaternionI4F</s:link-external></s:list-item>
          </s:list-unordered>
        </s:formal-item>
      </s:subsection>

      <s:subsection xml:id="com.io7m.jtensors.conventions.quaternions.handedness">
        <s:subsection-title>Rotations &amp; Handedness</s:subsection-title>
        <s:paragraph>
          The included quaternion types and functions have consistent semantics and
          assumptions with regards to rotation and coordinate systems as the
          <s:link s:target="com.io7m.jtensors.conventions.matrices.handedness">Matrix</s:link>
          types, and functions are provided to convert between matrices and
          quaternions.
        </s:paragraph>
      </s:subsection>

      <s:subsection xml:id="com.io7m.jtensors.conventions.quaternions.access">
        <s:subsection-title>Access control</s:subsection-title>
        <s:paragraph>
          If a function only needs to read from a value of a quaternion type, then
          it would be desirable to be able to statically enforce this fact. Therefore,
          the package provides a set of <s:term s:type="type">Readable</s:term>
          interfaces that all quaternion types implement. By writing a function that
          takes a value of a type implementing a <s:term s:type="type">Readable</s:term>
          interface, the programmer is implicitly stating that this function does
          not modify the quaternion.
        </s:paragraph>
        <s:formal-item s:kind="listing">
          <s:formal-item-title>Available quaternion Readable types</s:formal-item-title>
          <s:list-unordered>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/QuaternionReadable4F.html">QuaternionReadable4F</s:link-external></s:list-item>
            <s:list-item><s:link-external s:target="apidocs/com/io7m/jtensors/QuaternionReadable4D.html">QuaternionReadable4D</s:link-external></s:list-item>
          </s:list-unordered>
        </s:formal-item>
      </s:subsection>
    </s:section>
  </s:part>

  <s:part xml:id="com.io7m.jtensors.api">
    <s:part-title>API Reference</s:part-title>
    <s:part-contents/>
    <s:section>
      <s:section-title>Javadoc</s:section-title>
      <s:paragraph>
        API documentation for the package is provided via the
        included <s:link-external s:target="apidocs">Javadoc</s:link-external>.
      </s:paragraph>
    </s:section>
  </s:part>

</s:document>
