<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>io7m-jtensors 7.0.0-beta0006 Documentation: 2.1. Vectors</title><link rel="stylesheet" type="text/css" href="jstructural-2.0.0-layout.css"/><link rel="stylesheet" type="text/css" href="jstructural-2.0.0-colour.css"/><link rel="stylesheet" type="text/css" href="documentation.css"/></head><body><div class="st200_body"><div class="brand">
  <div class="brand_left">
    <a href="http://io7m.com/">io7m</a>
  </div>
  <div class="brand_right">
    <a href="http://io7m.github.io/jtensors/">io7m-jtensors</a> 7.0.0-beta0006
  </div>
</div><div class="st200_navbar st200_navbar_top"><table class="st200_navbar_table" summary="Navigation bar"><tr><td class="st200_navbar_prev_title_cell">2. Usage &amp; Conventions</td><td class="st200_navbar_up_title_cell">2. Usage &amp; Conventions</td><td class="st200_navbar_next_title_cell">2.2. Matrices</td></tr><tr><td class="st200_navbar_prev_file_cell"><a href="p2.xhtml#st200_p2">Previous</a></td><td class="st200_navbar_up_file_cell"><a href="p2.xhtml#st200_p2">Up</a></td><td class="st200_navbar_next_file_cell"><a href="p2s2.xhtml#st200_p2s2">Next</a></td></tr></table><hr class="st200_hr"/></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p2s1" href="#st200_p2s1">2.1</a></div><div class="st200_section_title">Vectors</div><ul class="st200_contents st200_section_contents_outer st200_section_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="p2s1.xhtml#st200_p2s1ss1">2.1.1. Types</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="p2s1.xhtml#st200_p2s1ss2">2.1.2. Access control</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="p2s1.xhtml#st200_p2s1ss3">2.1.3. Storage</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="p2s1.xhtml#st200_p2s1ss4">2.1.4. Phantom types</a></li></ul><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s1ss1" href="#st200_p2s1ss1">2.1.1</a></div><div class="st200_subsection_title">Types</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss1pg1" href="#st200_p2s1ss1pg1">1</a></div><div class="st200_paragraph">
      The <span class="st200_term package">io7m-jtensors</span> package provides vectors with
      single-precision (<span class="st200_term type">float</span>) elements,
      double-precision (<span class="st200_term type">double</span>) elements,
      integer (<span class="st200_term type">int</span>), and
      long integer (<span class="st200_term type">long</span>) elements. Each vector type
      is available in two, three, and four element versions. Each vector type is
      available in mutable or immutable versions.
      The package unambiguously identifies the vector types by using the
      following naming conventions for the types (given as a simple
      <a class="st200_link_external" href="http://en.wikipedia.org/wiki/EBNF">EBNF</a>
      grammar), where <span class="st200_term term">prefix</span> is a type-specific prefix:
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s1ss1fo1" href="#st200_p2s1ss1fo1">2.1.1.1. Vector type naming</a></div><pre class="st200_verbatim">
prefix       = ...
mutability   = "M" | "I" ;
size         = "2" | "3" | "4" ;
element_type = "I" | "L" | "F" | "D" ;
type         = prefix , mutability , size , element_type ;
      </pre></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s1ss2" href="#st200_p2s1ss2">2.1.2</a></div><div class="st200_subsection_title">Access control</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss2pg1" href="#st200_p2s1ss2pg1">1</a></div><div class="st200_paragraph">
      If a function only needs to read from a value of a vector type, then
      it would be desirable to be able to statically enforce this fact. Therefore,
      the package provides a set of <span class="st200_term type">Readable</span>
      interfaces that all vector types implement. By writing a function that
      takes a value of a type implementing a <span class="st200_term type">Readable</span>
      interface, the programmer is implicitly stating that this function does
      not modify the vector.
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s1ss2fo1" href="#st200_p2s1ss2fo1">2.1.2.1. Available vector Readable types</a></div><ul class="st200_list_unordered"><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorReadable2IType.html">VectorReadable2IType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorReadable2FType.html">VectorReadable2FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorReadable2DType.html">VectorReadable2DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorReadable2LType.html">VectorReadable2LType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorReadable3IType.html">VectorReadable3IType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorReadable3FType.html">VectorReadable3FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorReadable3DType.html">VectorReadable3DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorReadable3LType.html">VectorReadable3LType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorReadable4IType.html">VectorReadable4IType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorReadable4FType.html">VectorReadable4FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorReadable4DType.html">VectorReadable4DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorReadable4LType.html">VectorReadable4LType</a></li></ul></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss2pg2" href="#st200_p2s1ss2pg2">2</a></div><div class="st200_paragraph">
      Conversely, if a function writes to the elements of a vector without
      ever reading from it, it again would be desirable to statically enforce
      this fact. The package provides <span class="st200_term type">Writable</span>
      interfaces that all mutable vector types implement:
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s1ss2fo2" href="#st200_p2s1ss2fo2">2.1.2.2. Available vector Writable types</a></div><ul class="st200_list_unordered"><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorWritable2IType.html">VectorWritable2IType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorWritable2FType.html">VectorWritable2FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorWritable2DType.html">VectorWritable2DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorWritable2LType.html">VectorWritable2LType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorWritable3IType.html">VectorWritable3IType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorWritable3FType.html">VectorWritable3FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorWritable3DType.html">VectorWritable3DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorWritable3LType.html">VectorWritable3LType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorWritable4IType.html">VectorWritable4IType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorWritable4FType.html">VectorWritable4FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorWritable4DType.html">VectorWritable4DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorWritable4LType.html">VectorWritable4LType</a></li></ul></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss2pg3" href="#st200_p2s1ss2pg3">3</a></div><div class="st200_paragraph">
      Finally, a combination of the above interfaces is provided that
      essentially abstracts over mutable vector types. This allows the
      programmer to write code against pure interfaces without referring
      to a specific type, and to freely substitute alternative
      implementations at any time.
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s1ss2fo3" href="#st200_p2s1ss2fo3">2.1.2.3. Available vector interface types</a></div><ul class="st200_list_unordered"><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Vector2IType.html">Vector2IType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Vector2FType.html">Vector2FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Vector2DType.html">Vector2DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Vector2LType.html">Vector2LType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Vector3IType.html">Vector3IType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Vector3FType.html">Vector3FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Vector3DType.html">Vector3DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Vector3LType.html">Vector3LType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Vector4IType.html">Vector4IType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Vector4FType.html">Vector4FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Vector4DType.html">Vector4DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Vector4LType.html">Vector4LType</a></li></ul></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s1ss3" href="#st200_p2s1ss3">2.1.3</a></div><div class="st200_subsection_title">Storage</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss3pg1" href="#st200_p2s1ss3pg1">1</a></div><div class="st200_paragraph">
      As with all matrix types, all vector types have associated
      <a class="st200_link" href="p2s2.xhtml#st200_p2s2ss2">Context</a>
      types that allow for all methods to execute without allocating
      any memory. See the linked section for details.
    </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s1ss4" href="#st200_p2s1ss4">2.1.4</a></div><div class="st200_subsection_title">Phantom types</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss4pg1" href="#st200_p2s1ss4pg1">1</a></div><div class="st200_paragraph">
      The <span class="st200_term package">io7m-jtensors</span> package also provides
      copies of the existing vector types indexed by a
      <span class="st200_term term">phantom type parameter</span> in order to
      allow the programmer to make semantically distinct values
      <span class="st200_term term">type-incompatible</span>
      <span class="st200_footnote_reference"><a id="st200_fn_1_ref" href="#st200_fn_1">[1]</a></span>.
    </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss4pg2" href="#st200_p2s1ss4pg2">2</a></div><div class="st200_paragraph">
      The parameterized vector types and interfaces are provided in
      the <a class="st200_link_external" href="apidocs/com/io7m/jtensors/parameterized/package-summary.html">com.io7m.jtensors.parameterized</a>
      package.
    </div></div></div></div><div class="st200_footnotes"><hr/><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_1" href="#st200_fn_1_ref">1</a>]</div><div class="st200_footnote_body">
        See <a class="st200_link_external" href="http://io7m.com/documents/tt1-pt/">http://io7m.com/documents/tt1-pt/</a>.
      </div></div></div><div class="st200_navbar st200_navbar_bottom"><hr class="st200_hr"/><table class="st200_navbar_table" summary="Navigation bar"><tr><td class="st200_navbar_prev_file_cell"><a href="p2.xhtml#st200_p2">Previous</a></td><td class="st200_navbar_up_file_cell"><a href="p2.xhtml#st200_p2">Up</a></td><td class="st200_navbar_next_file_cell"><a href="p2s2.xhtml#st200_p2s2">Next</a></td></tr><tr><td class="st200_navbar_prev_title_cell">2. Usage &amp; Conventions</td><td class="st200_navbar_up_title_cell">2. Usage &amp; Conventions</td><td class="st200_navbar_next_title_cell">2.2. Matrices</td></tr></table></div></div></body></html>
