<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>io7m-jtensors 6.0.2 Documentation: 2.2. Matrices</title><link rel="stylesheet" type="text/css" href="jstructural-2.0.0-layout.css"/><link rel="stylesheet" type="text/css" href="jstructural-2.0.0-colour.css"/><link rel="stylesheet" type="text/css" href="documentation.css"/></head><body><div class="st200_body"><div class="brand">
  <div class="brand_left">
    <a href="http://io7m.com/">io7m</a>
  </div>
  <div class="brand_right">
    <a href="http://io7m.github.io/jtensors/">io7m-jtensors</a> 6.0.2
  </div>
</div><div class="st200_navbar st200_navbar_top"><table class="st200_navbar_table" summary="Navigation bar"><tr><td class="st200_navbar_prev_title_cell">2.1. Vectors</td><td class="st200_navbar_up_title_cell">2. Usage &amp; Conventions</td><td class="st200_navbar_next_title_cell">2.3. Quaternions</td></tr><tr><td class="st200_navbar_prev_file_cell"><a href="p2s1.xhtml#st200_p2s1">Previous</a></td><td class="st200_navbar_up_file_cell"><a href="p2.xhtml#st200_p2">Up</a></td><td class="st200_navbar_next_file_cell"><a href="p2s3.xhtml#st200_p2s3">Next</a></td></tr></table><hr class="st200_hr"/></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p2s2" href="#st200_p2s2">2.2</a></div><div class="st200_section_title">Matrices</div><ul class="st200_contents st200_section_contents_outer st200_section_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="p2s2.xhtml#st200_p2s2ss1">2.2.1. Types</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="p2s2.xhtml#st200_p2s2ss2">2.2.2. Storage</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="p2s2.xhtml#st200_p2s2ss3">2.2.3. Rotations &amp; Handedness</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="p2s2.xhtml#st200_p2s2ss4">2.2.4. Access control</a></li></ul><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s2ss1" href="#st200_p2s2ss1">2.2.1</a></div><div class="st200_subsection_title">Types</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss1pg1" href="#st200_p2s2ss1pg1">1</a></div><div class="st200_paragraph">
          The <span class="st200_term package">jtensors</span> package provides only square
          matrix types with single-precision (<span class="st200_term type">float</span>) elements,
          and double-precision (<span class="st200_term type">double</span>) elements.
          Matrices are currently only available in mutable form. The package unambiguously
          identifies the matrix types by using the following naming conventions for the types
          (given as a simple
          <a class="st200_link_external" href="http://en.wikipedia.org/wiki/EBNF">EBNF</a>
          grammar):
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss1fo1" href="#st200_p2s2ss1fo1">2.2.1.1. Matrix type naming</a></div><pre class="st200_verbatim">
mutability   = "M" ;
size         = "2x2" | "3x3" | "4x4" ;
element_type = "F" | "D" ;
type         = "Matrix" , mutability , size , element_type ;
          </pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss1pg2" href="#st200_p2s2ss1pg2">2</a></div><div class="st200_paragraph">
          A comprehensive list of the available matrix types is as follows:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss1fo2" href="#st200_p2s2ss1fo2">2.2.1.2. Available vector types</a></div><ul class="st200_list_unordered"><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixM2x2D.html">MatrixM2x2D</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixM2x2F.html">MatrixM2x2F</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixM3x3D.html">MatrixM3x3D</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixM3x3F.html">MatrixM3x3F</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixM4x4D.html">MatrixM4x4D</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixM4x4F.html">MatrixM4x4F</a></li></ul></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s2ss2" href="#st200_p2s2ss2">2.2.2</a></div><div class="st200_subsection_title">Storage</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss2pg1" href="#st200_p2s2ss2pg1">1</a></div><div class="st200_paragraph">
          All of the currently available matrix types are stored in direct memory
          <span class="st200_footnote_reference"><a id="st200_fn_1_ref" href="#st200_fn_1">[1]</a></span>. This allows for zero-copy passing of the matrix data
          to native code
          <span class="st200_footnote_reference"><a id="st200_fn_2_ref" href="#st200_fn_2">[2]</a></span>. Use of direct memory does incur an extra cost with regards
          to creation and deletion of matrices, and some functions in the package do
          require temporary matrices in order to work. Therefore, the package provides
          <span class="st200_term type">Context</span> types that allow the user to pre-allocate
          storage that the functions can reuse an unlimited number of times. The package
          typically defines one <span class="st200_term type">Context</span> type per class.
          See the <a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixM4x4D.Context.html">MatrixM4x4D.Context</a>
          type for a concrete example; any function in the
          <a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixM4x4D.html">MatrixM4x4D</a>
          class that takes a <span class="st200_term type">Context</span> as an argument can be
          depended upon not to allocate more memory. Note that the <span class="st200_term type">Context</span>
          type cannot be shared across threads and is completely opaque outside of the
          <span class="st200_term package">jtensors</span> package.
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss2fo1" href="#st200_p2s2ss2fo1">2.2.2.1. Context usage</a></div><pre class="st200_verbatim">MatrixM4x4D.Context context = new MatrixM4x4D.Context();
MatrixM4x4D mi = new MatrixM4x4D();
MatrixM4x4D mo = new MatrixM4x4D();

MatrixM4x4D.invertWithContext(context, mi, mo);
MatrixM4x4D.invertWithContext(context, mo, mi);
          </pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss2pg2" href="#st200_p2s2ss2pg2">2</a></div><div class="st200_paragraph">
          Matrix data is stored in column-major format
          <span class="st200_footnote_reference"><a id="st200_fn_3_ref" href="#st200_fn_3">[3]</a></span>, in whatever is the
          platform's native byte order. For an <span class="st200_term variable">m x m</span>
          square matrix, assuming that each element of the matrix uses
          <span class="st200_term variable">n</span> bytes, the first byte of the element at
          row <span class="st200_term variable">r</span> and column <span class="st200_term variable">c</span>
          (assuming <span class="st200_term function">0 &lt;= r &lt; m</span> and
          <span class="st200_term function">0 &lt;= c &lt; m</span>)
          can be found by <span class="st200_term function">(c * m * n) + (r * n)</span>.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss2pg3" href="#st200_p2s2ss2pg3">3</a></div><div class="st200_paragraph">
          As an example, a 4x4 matrix with <span class="st200_term constant">4</span>
          byte elements would be stored in memory as shown in the following
          diagram:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss2fo2" href="#st200_p2s2ss2fo2">2.2.2.2. Column-major storage memory layout</a></div><img class="st200_image" alt="Column-major storage memory layout" src="images/memory.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss2pg4" href="#st200_p2s2ss2pg4">4</a></div><div class="st200_paragraph">
          So, the element at row <span class="st200_term constant">0</span>,
          column <span class="st200_term constant">0</span> would be stored in
          bytes <span class="st200_term constant">[0 .. 3]</span>. The
          element at row <span class="st200_term constant">1</span>, column
          <span class="st200_term constant">0</span> would be stored in bytes
          <span class="st200_term constant">[4 .. 7]</span>. The
          element at row <span class="st200_term constant">0</span>, column
          <span class="st200_term constant">1</span> would be stored in bytes
          <span class="st200_term constant">[16 .. 19]</span>, and so on.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s2ss3" href="#st200_p2s2ss3">2.2.3</a></div><div class="st200_subsection_title">Rotations &amp; Handedness</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss3pg1" href="#st200_p2s2ss3pg1">1</a></div><div class="st200_paragraph">
          Any of the matrix functions that deal with rotations
          assume a right-handed coordinate system. This
          matches the system used by <a class="st200_link_external" href="http://opengl.org">OpenGL</a> (and most
          mathematics literature). A right-handed coordinate system
          assumes that if the viewer is standing at the origin and
          looking towards negative infinity on the Z axis, then the
          X axis runs horizontally (left towards negative infinity
          and right towards positive infinity), and the Y axis runs
          vertically (down towards negative infinity and up towards
          positive infinity). The following image demonstrates this
          axis configuration:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss3fo1" href="#st200_p2s2ss3fo1">2.2.3.1. Right-handed coordinate system</a></div><img class="st200_image" alt="Right-handed coordinate system" src="images/axes2.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss3pg2" href="#st200_p2s2ss3pg2">2</a></div><div class="st200_paragraph">
          The <span class="st200_term package">jtensors</span> package adheres
          to the convention that a positive rotation around an axis
          represents a counter-clockwise rotation when viewing the
          system along the negative direction of the axis in question.
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss3fo2" href="#st200_p2s2ss3fo2">2.2.3.2. Right-handed rotations</a></div><img class="st200_image" alt="Right-handed rotations" src="images/rotations.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss3pg3" href="#st200_p2s2ss3pg3">3</a></div><div class="st200_paragraph">
          The package uses the following matrices to define rotations
          around each axis:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss3fo3" href="#st200_p2s2ss3fo3">2.2.3.3. Rotation of r radians around the X axis</a></div><img class="st200_image" alt="Rotation of r radians around the X axis" src="images/matrix_rx.png"/></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss3fo4" href="#st200_p2s2ss3fo4">2.2.3.4. Rotation of r radians around the Y axis</a></div><img class="st200_image" alt="Rotation of r radians around the Y axis" src="images/matrix_ry.png"/></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss3fo5" href="#st200_p2s2ss3fo5">2.2.3.5. Rotation of r radians around the Z axis</a></div><img class="st200_image" alt="Rotation of r radians around the Z axis" src="images/matrix_rz.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss3pg4" href="#st200_p2s2ss3pg4">4</a></div><div class="st200_paragraph">
          Which results in the following matrix for rotating <span class="st200_term variable">r</span> radians around the axis given
          by <span class="st200_term constant">(x, y, z)</span>, assuming
          <span class="st200_term variable">s = sin(r)</span> and <span class="st200_term variable">c = cos(r)</span>
          <span class="st200_footnote_reference"><a id="st200_fn_4_ref" href="#st200_fn_4">[4]</a></span>:
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss3fo6" href="#st200_p2s2ss3fo6">2.2.3.6. Rotation of r radians around an arbitrary axis</a></div><img class="st200_image" alt="Rotation of r radians around an arbitrary axis" src="images/rot_matrix.png"/></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s2ss4" href="#st200_p2s2ss4">2.2.4</a></div><div class="st200_subsection_title">Access control</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss4pg1" href="#st200_p2s2ss4pg1">1</a></div><div class="st200_paragraph">
          If a function only needs to read from a value of a matrix type, then
          it would be desirable to be able to statically enforce this fact. Therefore,
          the package provides a set of <span class="st200_term type">Readable</span>
          interfaces that all matrix types implement. By writing a function that
          takes a value of a type implementing a <span class="st200_term type">Readable</span>
          interface, the programmer is implicitly stating that this function does
          not modify the matrix.
        </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss4fo1" href="#st200_p2s2ss4fo1">2.2.4.1. Available matrix Readable types</a></div><ul class="st200_list_unordered"><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixReadable2x2F.html">MatrixReadable2x2F</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixReadable2x2D.html">MatrixReadable2x2D</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixReadable3x3F.html">MatrixReadable3x3F</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixReadable3x3D.html">MatrixReadable3x3D</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixReadable4x4F.html">MatrixReadable4x4F</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixReadable4x4D.html">MatrixReadable4x4D</a></li></ul></div></div></div><div class="st200_footnotes"><hr/><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_1" href="#st200_fn_1_ref">1</a>]</div><div class="st200_footnote_body">
            See <a class="st200_link_external" href="http://docs.oracle.com/javase/1.5.0/docs/api/java/nio/ByteBuffer.html#allocateDirect(int)">ByteBuffer.allocateDirect(int)</a>.
          </div></div><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_2" href="#st200_fn_2_ref">2</a>]</div><div class="st200_footnote_body">
            Typically, the <a class="st200_link_external" href="http://opengl.org">OpenGL</a> API.
          </div></div><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_3" href="#st200_fn_3_ref">3</a>]</div><div class="st200_footnote_body">
            The convention used by most programs using the <a class="st200_link_external" href="http://opengl.org">OpenGL</a> API.
          </div></div><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_4" href="#st200_fn_4_ref">4</a>]</div><div class="st200_footnote_body">
            See <a class="st200_link_external" href="http://mathfor3dgameprogramming.com">Mathematics
            for 3D Game Programming and Computer
            Graphics</a> 3rd Edition, section 4.3.1 for the
            derivation.
          </div></div></div><div class="st200_navbar st200_navbar_bottom"><hr class="st200_hr"/><table class="st200_navbar_table" summary="Navigation bar"><tr><td class="st200_navbar_prev_file_cell"><a href="p2s1.xhtml#st200_p2s1">Previous</a></td><td class="st200_navbar_up_file_cell"><a href="p2.xhtml#st200_p2">Up</a></td><td class="st200_navbar_next_file_cell"><a href="p2s3.xhtml#st200_p2s3">Next</a></td></tr><tr><td class="st200_navbar_prev_title_cell">2.1. Vectors</td><td class="st200_navbar_up_title_cell">2. Usage &amp; Conventions</td><td class="st200_navbar_next_title_cell">2.3. Quaternions</td></tr></table></div></div></body></html>
