<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>io7m-jtensors 7.0.0-beta0006 Documentation</title><link rel="stylesheet" type="text/css" href="jstructural-2.0.0-layout.css"/><link rel="stylesheet" type="text/css" href="jstructural-2.0.0-colour.css"/><link rel="stylesheet" type="text/css" href="documentation.css"/></head><body><div class="st200_body"><div class="brand">
  <div class="brand_left">
    <a href="http://io7m.com/">io7m</a>
  </div>
  <div class="brand_right">
    <a href="http://io7m.github.io/jtensors/">io7m-jtensors</a> 7.0.0-beta0006
  </div>
</div><div class="st200_document_title">io7m-jtensors 7.0.0-beta0006 Documentation</div><ul class="st200_contents st200_document_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_part"><a href="#st200_p1">1. Package Information</a><ul class="st200_contents st200_part_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p1s1">1.1. Orientation</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p1s2">1.2. Installation</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p1s3">1.3. Platform Specific Issues</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p1s4">1.4. License</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_part"><a href="#st200_p2">2. Usage &amp; Conventions</a><ul class="st200_contents st200_part_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p2s1">2.1. Vectors</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p2s2">2.2. Matrices</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_section"><a href="#st200_p2s3">2.3. Quaternions</a></li></ul></li></ul><div class="st200_part_container"><div class="st200_part_title_number"><a id="st200_p1" href="#st200_p1">1</a></div><div class="st200_part_title">Package Information</div><ul class="st200_contents st200_part_contents_outer st200_part_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p1s1">1.1. Orientation</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p1s1ss1">1.1.1. Overview</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p1s1ss2">1.1.2. Efficiency</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p1s1ss3">1.1.3. Correctness</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p1s2">1.2. Installation</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p1s2ss1">1.2.1. Source compilation</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p1s2ss2">1.2.2. Maven</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p1s3">1.3. Platform Specific Issues</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p1s4">1.4. License</a></li></ul><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p1s1" href="#st200_p1s1">1.1</a></div><div class="st200_section_title">Orientation</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p1s1ss1" href="#st200_p1s1ss1">1.1.1</a></div><div class="st200_subsection_title">Overview</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s1ss1pg1" href="#st200_p1s1ss1pg1">1</a></div><div class="st200_paragraph">
          The <span class="st200_term package">io7m-jtensors</span> package implements a
          set of efficient vector, matrix, and quaternion classes intended for use
          in computer graphics applications.
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p1s1ss2" href="#st200_p1s1ss2">1.1.2</a></div><div class="st200_subsection_title">Efficiency</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s1ss2pg1" href="#st200_p1s1ss2pg1">1</a></div><div class="st200_paragraph">
          The package uses simple and efficient algorithms for all operations. The
          package also provides matrices that are backed by direct memory, allowing
          for zero-copy sharing of structures with native code.
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s1ss2pg2" href="#st200_p1s1ss2pg2">2</a></div><div class="st200_paragraph">
          Each vector and matrix type has an associated
          <span class="st200_term term">context</span> type containing enough
          preallocated storage to execute all functions in the type without
          performing any allocations. All code paths are therefore
          allocation free
          (with the exception of <span class="st200_term function">toString</span>
          methods, which require allocation by design).
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p1s1ss3" href="#st200_p1s1ss3">1.1.3</a></div><div class="st200_subsection_title">Correctness</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s1ss3pg1" href="#st200_p1s1ss3pg1">1</a></div><div class="st200_paragraph">
          The package includes a large battery of automated tests that attempt to verify
          the correctness of the included implementations. As of the time of writing,
          the tests manage 100% coverage for all code.
        </div></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p1s2" href="#st200_p1s2">1.2</a></div><div class="st200_section_title">Installation</div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p1s2ss1" href="#st200_p1s2ss1">1.2.1</a></div><div class="st200_subsection_title">Source compilation</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s2ss1pg1" href="#st200_p1s2ss1pg1">1</a></div><div class="st200_paragraph">
          The project can be compiled and installed with
          <a class="st200_link_external" href="http://maven.apache.org">Maven</a>:
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s2ss1pg2" href="#st200_p1s2ss1pg2">2</a></div><div class="st200_paragraph">
          <pre class="st200_verbatim example">$ mvn -C clean install</pre>
        </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p1s2ss2" href="#st200_p1s2ss2">1.2.2</a></div><div class="st200_subsection_title">Maven</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s2ss2pg1" href="#st200_p1s2ss2pg1">1</a></div><div class="st200_paragraph">
          Regular releases are made to the
          <a class="st200_link_external" href="http://search.maven.org/#search%7Cga%7C1%7Cio7m-jtensors">Central Repository</a>,
          so it's possible to use the <span class="st200_term package">io7m-jtensors</span>
          package in your projects with the following Maven dependency:
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s2ss2pg2" href="#st200_p1s2ss2pg2">2</a></div><div class="st200_paragraph">
          <pre class="st200_verbatim example">&lt;dependency&gt;
  &lt;groupId&gt;com.io7m.jtensors&lt;/groupId&gt;
  &lt;artifactId&gt;io7m-jtensors-core&lt;/artifactId&gt;
  &lt;version&gt;7.0.0-beta0006&lt;/version&gt;
&lt;/dependency&gt;</pre>
        </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s2ss2pg3" href="#st200_p1s2ss2pg3">3</a></div><div class="st200_paragraph">
          All <a class="st200_link_external" href="http://io7m.com">io7m.com</a>
          packages use Semantic Versioning
          <span class="st200_footnote_reference"><a id="st200_fn_0_ref" href="#st200_fn_0">[0]</a></span>, which implies that it is always safe to use version ranges
          with an exclusive upper bound equal to the next major version - the API of
          the package will not change in a backwards-incompatible manner before the
          next major version.
        </div></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p1s3" href="#st200_p1s3">1.3</a></div><div class="st200_section_title">Platform Specific Issues</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s3pg1" href="#st200_p1s3pg1">1</a></div><div class="st200_paragraph">
        There are currently no known platform-specific issues.
      </div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p1s4" href="#st200_p1s4">1.4</a></div><div class="st200_section_title">License</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p1s4pg1" href="#st200_p1s4pg1">1</a></div><div class="st200_paragraph">
        All files distributed with the <span class="st200_term package">io7m-jtensors</span>
        package are placed under the following license:
        <pre class="st200_verbatim license">Copyright © 2015 &lt;code@io7m.com&gt; http://io7m.com

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
        </pre>
      </div></div></div></div><div class="st200_part_container"><div class="st200_part_title_number"><a id="st200_p2" href="#st200_p2">2</a></div><div class="st200_part_title">Usage &amp; Conventions</div><ul class="st200_contents st200_part_contents_outer st200_part_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p2s1">2.1. Vectors</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p2s1ss1">2.1.1. Types</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p2s1ss2">2.1.2. Access control</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p2s1ss3">2.1.3. Storage</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p2s1ss4">2.1.4. Phantom types</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p2s2">2.2. Matrices</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p2s2ss1">2.2.1. Types</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p2s2ss2">2.2.2. Storage</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p2s2ss3">2.2.3. Rotations &amp; Handedness</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p2s2ss4">2.2.4. Access control</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p2s2ss5">2.2.5. Phantom Types</a></li></ul></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_section"><a href="#st200_p2s3">2.3. Quaternions</a><ul class="st200_contents st200_section_contents"><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p2s3ss1">2.3.1. Types</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p2s3ss2">2.3.2. Rotations &amp; Handedness</a></li><li class="st200_contents_item st200_contents_item2 st200_contents_item_subsection"><a href="#st200_p2s3ss3">2.3.3. Access control</a></li></ul></li></ul><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p2s1" href="#st200_p2s1">2.1</a></div><div class="st200_section_title">Vectors</div><ul class="st200_contents st200_section_contents_outer st200_section_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p2s1ss1">2.1.1. Types</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p2s1ss2">2.1.2. Access control</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p2s1ss3">2.1.3. Storage</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p2s1ss4">2.1.4. Phantom types</a></li></ul><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s1ss1" href="#st200_p2s1ss1">2.1.1</a></div><div class="st200_subsection_title">Types</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss1pg1" href="#st200_p2s1ss1pg1">1</a></div><div class="st200_paragraph">
      The <span class="st200_term package">io7m-jtensors</span> package provides vectors with
      single-precision (<span class="st200_term type">float</span>) elements,
      double-precision (<span class="st200_term type">double</span>) elements,
      integer (<span class="st200_term type">int</span>), and
      long integer (<span class="st200_term type">long</span>) elements. Each vector type
      is available in two, three, and four element versions. Each vector type is
      available in mutable or immutable versions.
      The package unambiguously identifies the vector types by using the
      following naming conventions for the types (given as a simple
      <a class="st200_link_external" href="http://en.wikipedia.org/wiki/EBNF">EBNF</a>
      grammar), where <span class="st200_term term">prefix</span> is a type-specific prefix:
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s1ss1fo1" href="#st200_p2s1ss1fo1">2.1.1.1. Vector type naming</a></div><pre class="st200_verbatim">
prefix       = ...
mutability   = "M" | "I" ;
size         = "2" | "3" | "4" ;
element_type = "I" | "L" | "F" | "D" ;
type         = prefix , mutability , size , element_type ;
      </pre></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s1ss2" href="#st200_p2s1ss2">2.1.2</a></div><div class="st200_subsection_title">Access control</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss2pg1" href="#st200_p2s1ss2pg1">1</a></div><div class="st200_paragraph">
      If a function only needs to read from a value of a vector type, then
      it would be desirable to be able to statically enforce this fact. Therefore,
      the package provides a set of <span class="st200_term type">Readable</span>
      interfaces that all vector types implement. By writing a function that
      takes a value of a type implementing a <span class="st200_term type">Readable</span>
      interface, the programmer is implicitly stating that this function does
      not modify the vector.
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s1ss2fo1" href="#st200_p2s1ss2fo1">2.1.2.1. Available vector Readable types</a></div><ul class="st200_list_unordered"><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorReadable2IType.html">VectorReadable2IType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorReadable2FType.html">VectorReadable2FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorReadable2DType.html">VectorReadable2DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorReadable2LType.html">VectorReadable2LType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorReadable3IType.html">VectorReadable3IType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorReadable3FType.html">VectorReadable3FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorReadable3DType.html">VectorReadable3DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorReadable3LType.html">VectorReadable3LType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorReadable4IType.html">VectorReadable4IType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorReadable4FType.html">VectorReadable4FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorReadable4DType.html">VectorReadable4DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorReadable4LType.html">VectorReadable4LType</a></li></ul></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss2pg2" href="#st200_p2s1ss2pg2">2</a></div><div class="st200_paragraph">
      Conversely, if a function writes to the elements of a vector without
      ever reading from it, it again would be desirable to statically enforce
      this fact. The package provides <span class="st200_term type">Writable</span>
      interfaces that all mutable vector types implement:
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s1ss2fo2" href="#st200_p2s1ss2fo2">2.1.2.2. Available vector Writable types</a></div><ul class="st200_list_unordered"><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorWritable2IType.html">VectorWritable2IType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorWritable2FType.html">VectorWritable2FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorWritable2DType.html">VectorWritable2DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorWritable2LType.html">VectorWritable2LType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorWritable3IType.html">VectorWritable3IType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorWritable3FType.html">VectorWritable3FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorWritable3DType.html">VectorWritable3DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorWritable3LType.html">VectorWritable3LType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorWritable4IType.html">VectorWritable4IType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorWritable4FType.html">VectorWritable4FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorWritable4DType.html">VectorWritable4DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/VectorWritable4LType.html">VectorWritable4LType</a></li></ul></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss2pg3" href="#st200_p2s1ss2pg3">3</a></div><div class="st200_paragraph">
      Finally, a combination of the above interfaces is provided that
      essentially abstracts over mutable vector types. This allows the
      programmer to write code against pure interfaces without referring
      to a specific type, and to freely substitute alternative
      implementations at any time.
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s1ss2fo3" href="#st200_p2s1ss2fo3">2.1.2.3. Available vector interface types</a></div><ul class="st200_list_unordered"><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Vector2IType.html">Vector2IType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Vector2FType.html">Vector2FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Vector2DType.html">Vector2DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Vector2LType.html">Vector2LType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Vector3IType.html">Vector3IType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Vector3FType.html">Vector3FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Vector3DType.html">Vector3DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Vector3LType.html">Vector3LType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Vector4IType.html">Vector4IType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Vector4FType.html">Vector4FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Vector4DType.html">Vector4DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Vector4LType.html">Vector4LType</a></li></ul></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s1ss3" href="#st200_p2s1ss3">2.1.3</a></div><div class="st200_subsection_title">Storage</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss3pg1" href="#st200_p2s1ss3pg1">1</a></div><div class="st200_paragraph">
      As with all matrix types, all vector types have associated
      <a class="st200_link" href="#st200_p2s2ss2">Context</a>
      types that allow for all methods to execute without allocating
      any memory. See the linked section for details.
    </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s1ss4" href="#st200_p2s1ss4">2.1.4</a></div><div class="st200_subsection_title">Phantom types</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss4pg1" href="#st200_p2s1ss4pg1">1</a></div><div class="st200_paragraph">
      The <span class="st200_term package">io7m-jtensors</span> package also provides
      copies of the existing vector types indexed by a
      <span class="st200_term term">phantom type parameter</span> in order to
      allow the programmer to make semantically distinct values
      <span class="st200_term term">type-incompatible</span>
      <span class="st200_footnote_reference"><a id="st200_fn_1_ref" href="#st200_fn_1">[1]</a></span>.
    </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s1ss4pg2" href="#st200_p2s1ss4pg2">2</a></div><div class="st200_paragraph">
      The parameterized vector types and interfaces are provided in
      the <a class="st200_link_external" href="apidocs/com/io7m/jtensors/parameterized/package-summary.html">com.io7m.jtensors.parameterized</a>
      package.
    </div></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p2s2" href="#st200_p2s2">2.2</a></div><div class="st200_section_title">Matrices</div><ul class="st200_contents st200_section_contents_outer st200_section_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p2s2ss1">2.2.1. Types</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p2s2ss2">2.2.2. Storage</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p2s2ss3">2.2.3. Rotations &amp; Handedness</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p2s2ss4">2.2.4. Access control</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p2s2ss5">2.2.5. Phantom Types</a></li></ul><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s2ss1" href="#st200_p2s2ss1">2.2.1</a></div><div class="st200_subsection_title">Types</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss1pg1" href="#st200_p2s2ss1pg1">1</a></div><div class="st200_paragraph">
      The <span class="st200_term package">io7m-jtensors</span> package provides only square
      matrix types with single-precision (<span class="st200_term type">float</span>) elements,
      and double-precision (<span class="st200_term type">double</span>) elements.
      The package unambiguously identifies the matrix types by using the following
      naming conventions for the types (given as a simple
      <a class="st200_link_external" href="http://en.wikipedia.org/wiki/EBNF">EBNF</a>
      grammar), where <span class="st200_term term">prefix</span> is a type-specific prefix:
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss1fo1" href="#st200_p2s2ss1fo1">2.2.1.1. Matrix type naming</a></div><pre class="st200_verbatim">
prefix       = ...
mutability   = "M" | "I" ;
size         = "2x2" | "3x3" | "4x4" ;
element_type = "F" | "D" ;
type         = prefix , mutability , size , element_type ;
      </pre></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s2ss2" href="#st200_p2s2ss2">2.2.2</a></div><div class="st200_subsection_title">Storage</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss2pg1" href="#st200_p2s2ss2pg1">1</a></div><div class="st200_paragraph">
      Several implementations of the matrix types are available, some of
      which store the elements of matrices data in direct memory
      <span class="st200_footnote_reference"><a id="st200_fn_2_ref" href="#st200_fn_2">[2]</a></span>. This allows for zero-copy passing of the matrix data
      to native code
      <span class="st200_footnote_reference"><a id="st200_fn_3_ref" href="#st200_fn_3">[3]</a></span>. Use of direct memory does incur an extra cost with regards
      to creation and deletion of matrices, and some functions in the package do
      require temporary matrices in order to work. Therefore, the package provides
      <span class="st200_term type">Context</span> types that allow the user to pre-allocate
      storage that the functions can reuse an unlimited number of times. The package
      typically defines one <span class="st200_term type">Context</span> type per class.
      See the <a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixM4x4D.ContextMM4D.html">MatrixM4x4D.ContextMM4D</a>
      type for a concrete example; any function in the
      <a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixM4x4D.html">MatrixM4x4D</a>
      class that takes a <span class="st200_term type">ContextMM4D</span> as an argument can be
      depended upon not to allocate more memory. Note that the <span class="st200_term type">ContextMM4D</span>
      type cannot be shared across threads and is completely opaque outside of the
      <span class="st200_term package">jtensors</span> package: Users should
      allocate one <span class="st200_term type">ContextMM4D</span>
      per thread.
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss2fo1" href="#st200_p2s2ss2fo1">2.2.2.1. Context usage</a></div><pre class="st200_verbatim">
MatrixM4x4D.ContextMM4D context = new MatrixM4x4D.ContextMM4D();
Matrix4x4DType mi = MatrixDirectM4x4D.newMatrix();
Matrix4x4DType mo = MatrixDirectM4x4D.newMatrix();

MatrixM4x4D.invert(context, mi, mo);
MatrixM4x4D.invert(context, mo, mi);
      </pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss2pg2" href="#st200_p2s2ss2pg2">2</a></div><div class="st200_paragraph">
      Matrix data is stored in column-major format
      <span class="st200_footnote_reference"><a id="st200_fn_4_ref" href="#st200_fn_4">[4]</a></span>, in whatever is the
      platform's native byte order. For an <span class="st200_term variable">m x m</span>
      square matrix, assuming that each element of the matrix uses
      <span class="st200_term variable">n</span> bytes, the first byte of the element at
      row <span class="st200_term variable">r</span> and column <span class="st200_term variable">c</span>
      (assuming <span class="st200_term function">0 &lt;= r &lt; m</span> and
      <span class="st200_term function">0 &lt;= c &lt; m</span>)
      can be found by <span class="st200_term function">(c * m * n) + (r * n)</span>.
    </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss2pg3" href="#st200_p2s2ss2pg3">3</a></div><div class="st200_paragraph">
      As an example, a 4x4 matrix with <span class="st200_term constant">4</span>
      byte elements would be stored in memory as shown in the following
      diagram:
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss2fo2" href="#st200_p2s2ss2fo2">2.2.2.2. Column-major storage memory layout</a></div><img class="st200_image" alt="Column-major storage memory layout" src="images/memory.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss2pg4" href="#st200_p2s2ss2pg4">4</a></div><div class="st200_paragraph">
      So, the element at row <span class="st200_term constant">0</span>,
      column <span class="st200_term constant">0</span> would be stored in
      bytes <span class="st200_term constant">[0 .. 3]</span>. The
      element at row <span class="st200_term constant">1</span>, column
      <span class="st200_term constant">0</span> would be stored in bytes
      <span class="st200_term constant">[4 .. 7]</span>. The
      element at row <span class="st200_term constant">0</span>, column
      <span class="st200_term constant">1</span> would be stored in bytes
      <span class="st200_term constant">[16 .. 19]</span>, and so on.
    </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss2pg5" href="#st200_p2s2ss2pg5">5</a></div><div class="st200_paragraph">
      The immutable matrix types available in the package are not
      backed by direct memory and only offer a small fraction of
      the functionality of the mutable types. They are essentially
      provided as a way to construct immutable snapshots of a mutable
      matrix in order to, for example, safely transfer matrix values
      across threads without sharing a reference to mutable memory.
    </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s2ss3" href="#st200_p2s2ss3">2.2.3</a></div><div class="st200_subsection_title">Rotations &amp; Handedness</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss3pg1" href="#st200_p2s2ss3pg1">1</a></div><div class="st200_paragraph">
      Any of the matrix functions that deal with rotations
      assume a right-handed coordinate system. This
      matches the system used by <a class="st200_link_external" href="http://opengl.org">OpenGL</a> (and most
      mathematics literature). A right-handed coordinate system
      assumes that if the viewer is standing at the origin and
      looking towards negative infinity on the Z axis, then the
      X axis runs horizontally (left towards negative infinity
      and right towards positive infinity), and the Y axis runs
      vertically (down towards negative infinity and up towards
      positive infinity). The following image demonstrates this
      axis configuration:
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss3fo1" href="#st200_p2s2ss3fo1">2.2.3.1. Right-handed coordinate system</a></div><img class="st200_image" alt="Right-handed coordinate system" src="images/axes2.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss3pg2" href="#st200_p2s2ss3pg2">2</a></div><div class="st200_paragraph">
      The <span class="st200_term package">io7m-jtensors</span> package adheres
      to the convention that a positive rotation around an axis
      represents a counter-clockwise rotation when viewing the
      system along the negative direction of the axis in question.
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss3fo2" href="#st200_p2s2ss3fo2">2.2.3.2. Right-handed rotations</a></div><img class="st200_image" alt="Right-handed rotations" src="images/rotations.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss3pg3" href="#st200_p2s2ss3pg3">3</a></div><div class="st200_paragraph">
      The package uses the following matrices to define rotations
      around each axis:
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss3fo3" href="#st200_p2s2ss3fo3">2.2.3.3. Rotation of r radians around the X axis</a></div><img class="st200_image" alt="Rotation of r radians around the X axis" src="images/matrix_rx.png"/></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss3fo4" href="#st200_p2s2ss3fo4">2.2.3.4. Rotation of r radians around the Y axis</a></div><img class="st200_image" alt="Rotation of r radians around the Y axis" src="images/matrix_ry.png"/></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss3fo5" href="#st200_p2s2ss3fo5">2.2.3.5. Rotation of r radians around the Z axis</a></div><img class="st200_image" alt="Rotation of r radians around the Z axis" src="images/matrix_rz.png"/></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss3pg4" href="#st200_p2s2ss3pg4">4</a></div><div class="st200_paragraph">
      Which results in the following matrix for rotating <span class="st200_term variable">r</span> radians around the axis given
      by <span class="st200_term constant">(x, y, z)</span>, assuming
      <span class="st200_term variable">s = sin(r)</span> and <span class="st200_term variable">c = cos(r)</span>
      <span class="st200_footnote_reference"><a id="st200_fn_5_ref" href="#st200_fn_5">[5]</a></span>:
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss3fo6" href="#st200_p2s2ss3fo6">2.2.3.6. Rotation of r radians around an arbitrary axis</a></div><img class="st200_image" alt="Rotation of r radians around an arbitrary axis" src="images/rot_matrix.png"/></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s2ss4" href="#st200_p2s2ss4">2.2.4</a></div><div class="st200_subsection_title">Access control</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss4pg1" href="#st200_p2s2ss4pg1">1</a></div><div class="st200_paragraph">
      If a function only needs to read from a value of a matrix type, then
      it would be desirable to be able to statically enforce this fact. Therefore,
      the package provides a set of <span class="st200_term type">Readable</span>
      interfaces that all matrix types implement. By writing a function that
      takes a value of a type implementing a <span class="st200_term type">Readable</span>
      interface, the programmer is implicitly stating that this function does
      not modify the matrix.
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss4fo1" href="#st200_p2s2ss4fo1">2.2.4.1. Available matrix Readable types</a></div><ul class="st200_list_unordered"><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixReadable2x2FType.html">MatrixReadable2x2FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixReadable2x2DType.html">MatrixReadable2x2DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixReadable3x3FType.html">MatrixReadable3x3FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixReadable3x3DType.html">MatrixReadable3x3DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixReadable4x4FType.html">MatrixReadable4x4FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixReadable4x4DType.html">MatrixReadable4x4DType</a></li></ul></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss4pg2" href="#st200_p2s2ss4pg2">2</a></div><div class="st200_paragraph">
      If a function needs to write to a value of a matrix type, then
      it would be desirable to be able to statically indicate this fact. Therefore,
      the package provides a set of <span class="st200_term type">Writable</span>
      interfaces that all mutable matrix types implement. By writing a function that
      takes a value of a type implementing a <span class="st200_term type">Writable</span>
      interface, the programmer is implicitly stating that this function may
      modify the matrix.
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss4fo2" href="#st200_p2s2ss4fo2">2.2.4.2. Available matrix Writable types</a></div><ul class="st200_list_unordered"><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixWritable2x2FType.html">MatrixWritable2x2FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixWritable2x2DType.html">MatrixWritable2x2DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixWritable3x3FType.html">MatrixWritable3x3FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixWritable3x3DType.html">MatrixWritable3x3DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixWritable4x4FType.html">MatrixWritable4x4FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixWritable4x4DType.html">MatrixWritable4x4DType</a></li></ul></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss4pg3" href="#st200_p2s2ss4pg3">3</a></div><div class="st200_paragraph">
      A combination of the above interfaces is provided that
      essentially abstracts over mutable matrix types. This allows the
      programmer to write code against pure interfaces without referring
      to a specific type, and to freely substitute alternative
      implementations at any time.
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss4fo3" href="#st200_p2s2ss4fo3">2.2.4.3. Available matrix interface types</a></div><ul class="st200_list_unordered"><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Matrix2x2FType.html">Matrix2x2FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Matrix2x2DType.html">Matrix2x2DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Matrix3x3FType.html">Matrix3x3FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Matrix3x3DType.html">Matrix3x3DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Matrix4x4FType.html">Matrix4x4FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Matrix4x4DType.html">Matrix4x4DType</a></li></ul></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss4pg4" href="#st200_p2s2ss4pg4">4</a></div><div class="st200_paragraph">
      Finally, if matrices that are backed by direct memory are required
      (in order to pass them directly to native code, for example), the
      programmer can require matrices of a
      <span class="st200_term type">Direct</span> type.
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss4fo4" href="#st200_p2s2ss4fo4">2.2.4.4. Available matrix Direct types</a></div><ul class="st200_list_unordered"><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixDirectDType.html">MatrixDirectDType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixDirectFType.html">MatrixDirectFType</a></li></ul></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss4pg5" href="#st200_p2s2ss4pg5">5</a></div><div class="st200_paragraph">
      It is also useful for the sizes of matrices to be indicated
      in the types, so the package provides a set of interfaces
      combining the <span class="st200_term type">Readable</span> and
      <span class="st200_term type">Direct</span> types.
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss4fo5" href="#st200_p2s2ss4fo5">2.2.4.5. Available matrix DirectReadable types</a></div><ul class="st200_list_unordered"><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixDirectReadable2x2FType.html">MatrixDirectReadable2x2FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixDirectReadable2x2DType.html">MatrixDirectReadable2x2DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixDirectReadable3x3FType.html">MatrixDirectReadable3x3FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixDirectReadable3x3DType.html">MatrixDirectReadable3x3DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixDirectReadable4x4FType.html">MatrixDirectReadable4x4FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixDirectReadable4x4DType.html">MatrixDirectReadable4x4DType</a></li></ul></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss4pg6" href="#st200_p2s2ss4pg6">6</a></div><div class="st200_paragraph">
      Interfaces that abstract over direct, mutable matrices are also
      provided:
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss4fo6" href="#st200_p2s2ss4fo6">2.2.4.6. Available matrix Direct types</a></div><ul class="st200_list_unordered"><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixDirect2x2FType.html">MatrixDirect2x2FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixDirect2x2DType.html">MatrixDirect2x2DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixDirect3x3FType.html">MatrixDirect3x3FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixDirect3x3DType.html">MatrixDirect3x3DType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixDirect4x4FType.html">MatrixDirect4x4FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/MatrixDirect4x4DType.html">MatrixDirect4x4DType</a></li></ul></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s2ss5" href="#st200_p2s2ss5">2.2.5</a></div><div class="st200_subsection_title">Phantom Types</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss5pg1" href="#st200_p2s2ss5pg1">1</a></div><div class="st200_paragraph">
      As with the <a class="st200_link" href="#st200_p2s1ss4">vector</a>
      types, the <span class="st200_term package">io7m-jtensors</span> package
      provides copies of all of the existing matrix types (and interfaces) indexed
      by a pair of <span class="st200_term term">phantom type parameters</span>.
    </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss5pg2" href="#st200_p2s2ss5pg2">2</a></div><div class="st200_paragraph">
      Conceptually, a matrix can be considered as storing a transform from
      coordinate space <span class="st200_term type">T0</span> to space
      <span class="st200_term type">T1</span>. For a 4x4 mutable matrix
      in the <span class="st200_term package">io7m-jtensors</span> package,
      this is denoted by the type <span class="st200_term type">PMatrixM4x4F&lt;T0,T1&gt;</span>.
      It then follows that when matrices are concatenated via multiplications,
      their type parameters are translated accordingly. For example,
      a matrix <span class="st200_term type">PMatrixM4x4F&lt;T0,T1&gt;</span>
      multiplied by a matrix
      <span class="st200_term type">PMatrixM4x4F&lt;T1,T2&gt;</span> results
      in a matrix of type
      <span class="st200_term type">PMatrixM4x4F&lt;T0,T2&gt;</span>. Inverting
      a matrix results in a matrix that represents the inverse of the original
      transform that the matrix represented. For example, inverting a matrix of
      type <span class="st200_term type">PMatrixM4x4F&lt;T0,T1&gt;</span> results
      in a matrix of type
      <span class="st200_term type">PMatrixM4x4F&lt;T1,T0&gt;</span>.
    </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss5pg3" href="#st200_p2s2ss5pg3">3</a></div><div class="st200_paragraph">
      Type parameters are also translated across multiplications by
      vectors. A multiplication of a vector of type
      <span class="st200_term type">PVectorI4F&lt;T0&gt;</span> by a matrix of
      type
      <span class="st200_term type">PMatrixM4x4F&lt;T0,T1&gt;</span> results in
      a vector of type
      <span class="st200_term type">PVectorI4F&lt;T1&gt;</span>.
    </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss5pg4" href="#st200_p2s2ss5pg4">4</a></div><div class="st200_paragraph">
      Being able to track the types of transforms at this level of detail
      is invaluable when using systems such as OpenGL, where accidentally
      mixing up matrices tends to result in visual anomalies that can be
      extremely hard to track down. By explicitly denoting coordinate spaces
      with empty types, it's possible to statically prevent all bugs involving
      accidentally mixing up matrices. It's also possible to prevent the
      incorrect construction of matrices
      <span class="st200_footnote_reference"><a id="st200_fn_6_ref" href="#st200_fn_6">[6]</a></span>. Additionally,
      with each matrix labelled by the type of transform it represents, code becomes
      self-documenting.
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s2ss5fo1" href="#st200_p2s2ss5fo1">2.2.5.1. Static tracking of transforms</a></div><pre class="st200_verbatim">
interface WorldSpace { }
interface ViewSpace { }
interface ObjectSpace { }

PMatrixM4x4F&lt;ObjectSpace, WorldSpace&gt; matrix_model;
PMatrixM4x4F&lt;WorldSpace, ViewSpace&gt; matrix_view;
PMatrixM4x4F&lt;ObjectSpace, ViewSpace&gt; matrix_modelview;

PMatrixM4x4F.multiply (matrix_view, matrix_model, matrix_modelview);

// Compilation error: The resulting matrix would be of type PMatrixM4x4F&lt;ViewSpace, ObjectSpace&gt;
// PMatrixM4x4F.multiply (matrix_model, matrix_view, matrix_modelview);

PMatrixM4x4F&lt;ViewSpace, WorldSpace&gt; matrix_view_inverse;
PMatrixM4x4F.invert(context, matrix_view, matrix_view_inverse);
</pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss5pg5" href="#st200_p2s2ss5pg5">5</a></div><div class="st200_paragraph">
      Of course, because the type system is unsound, and because the matrices
      are mutable, it is obviously possible to deliberately construct matrices
      that claim to be of a particular type of transform but nevertheless
      contain nonsense values. It is, however, difficult to do this accidentally.
      The <span class="st200_term package">io7m-jtensors</span> package strives
      to provide a means to prevent accidental errors, and doesn't attempt to
      address deliberate sabotage.
    </div></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s2ss5pg6" href="#st200_p2s2ss5pg6">6</a></div><div class="st200_paragraph">
      The parameterized matrix types and interfaces are provided in
      the <a class="st200_link_external" href="apidocs/com/io7m/jtensors/parameterized/package-summary.html">com.io7m.jtensors.parameterized</a>
      package.
    </div></div></div></div><div class="st200_section_container"><div class="st200_section_title_number"><a id="st200_p2s3" href="#st200_p2s3">2.3</a></div><div class="st200_section_title">Quaternions</div><ul class="st200_contents st200_section_contents_outer st200_section_contents"><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p2s3ss1">2.3.1. Types</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p2s3ss2">2.3.2. Rotations &amp; Handedness</a></li><li class="st200_contents_item st200_contents_item1 st200_contents_item_subsection"><a href="#st200_p2s3ss3">2.3.3. Access control</a></li></ul><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s3ss1" href="#st200_p2s3ss1">2.3.1</a></div><div class="st200_subsection_title">Types</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s3ss1pg1" href="#st200_p2s3ss1pg1">1</a></div><div class="st200_paragraph">
      The <span class="st200_term package">io7m-jtensors</span>
      package provides quaternions with single-precision
      (<span class="st200_term type">float</span>) elements, and
      double-precision (<span class="st200_term type">double</span>)
      elements.  Each quaternion type is available in mutable or
      immutable versions. The package unambiguously identifies
      the quaternion types by using the following naming
      conventions for the types (given as a simple <a class="st200_link_external" href="http://en.wikipedia.org/wiki/EBNF">EBNF</a>
      grammar):
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s3ss1fo1" href="#st200_p2s3ss1fo1">2.3.1.1. Quaternion type naming</a></div><pre class="st200_verbatim">
mutability   = "M" | "I" ;
size         = "4" ;
element_type = "F" | "D" ;
type         = "Quaternion" , mutability , size , element_type ;
      </pre></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s3ss1pg2" href="#st200_p2s3ss1pg2">2</a></div><div class="st200_paragraph">
      A comprehensive list of the available quaternion types is as follows:
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s3ss1fo2" href="#st200_p2s3ss1fo2">2.3.1.2. Available quaternion types</a></div><ul class="st200_list_unordered"><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/QuaternionM4D.html">QuaternionM4D</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/QuaternionM4F.html">QuaternionM4F</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/QuaternionI4D.html">QuaternionI4D</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/QuaternionI4F.html">QuaternionI4F</a></li></ul></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s3ss2" href="#st200_p2s3ss2">2.3.2</a></div><div class="st200_subsection_title">Rotations &amp; Handedness</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s3ss2pg1" href="#st200_p2s3ss2pg1">1</a></div><div class="st200_paragraph">
      The included quaternion types and functions have consistent semantics and
      assumptions with regards to rotation and coordinate systems as the
      <a class="st200_link" href="#st200_p2s2ss3">Matrix</a>
      types, and functions are provided to convert between matrices and
      quaternions.
    </div></div></div><div class="st200_subsection_container"><div class="st200_subsection_title_number"><a id="st200_p2s3ss3" href="#st200_p2s3ss3">2.3.3</a></div><div class="st200_subsection_title">Access control</div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s3ss3pg1" href="#st200_p2s3ss3pg1">1</a></div><div class="st200_paragraph">
      If a function only needs to read from a value of a quaternion type, then
      it would be desirable to be able to statically enforce this fact. Therefore,
      the package provides a set of <span class="st200_term type">Readable</span>
      interfaces that all quaternion types implement. By writing a function that
      takes a value of a type implementing a <span class="st200_term type">Readable</span>
      interface, the programmer is implicitly stating that this function does
      not modify the quaternion.
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s3ss3fo1" href="#st200_p2s3ss3fo1">2.3.3.1. Available quaternion Readable types</a></div><ul class="st200_list_unordered"><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/QuaternionReadable4FType.html">QuaternionReadable4FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/QuaternionReadable4DType.html">QuaternionReadable4DType</a></li></ul></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s3ss3pg2" href="#st200_p2s3ss3pg2">2</a></div><div class="st200_paragraph">
      <span class="st200_term type">Writable</span> interfaces are provided:
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s3ss3fo2" href="#st200_p2s3ss3fo2">2.3.3.2. Available quaternion Writable types</a></div><ul class="st200_list_unordered"><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/QuaternionWritable4FType.html">QuaternionWritable4FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/QuaternionWritable4DType.html">QuaternionWritable4DType</a></li></ul></div><div class="st200_paragraph_container"><div class="st200_paragraph_number"><a id="st200_p2s3ss3pg3" href="#st200_p2s3ss3pg3">3</a></div><div class="st200_paragraph">
      Interfaces that abstract over mutable quaternions are provided:
    </div></div><div class="st200_formal_item"><div class="st200_formal_item_title"><a id="st200_p2s3ss3fo3" href="#st200_p2s3ss3fo3">2.3.3.3. Available quaternion  types</a></div><ul class="st200_list_unordered"><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Quaternion4FType.html">Quaternion4FType</a></li><li class="st200_list_item"><a class="st200_link_external" href="apidocs/com/io7m/jtensors/Quaternion4DType.html">Quaternion4DType</a></li></ul></div></div></div></div><div class="st200_footnotes"><hr/><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_0" href="#st200_fn_0_ref">0</a>]</div><div class="st200_footnote_body">
            <a class="st200_link_external" href="http://semver.org">http://semver.org</a>
          </div></div><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_1" href="#st200_fn_1_ref">1</a>]</div><div class="st200_footnote_body">
        See <a class="st200_link_external" href="http://io7m.com/documents/tt1-pt/">http://io7m.com/documents/tt1-pt/</a>.
      </div></div><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_2" href="#st200_fn_2_ref">2</a>]</div><div class="st200_footnote_body">
        See <a class="st200_link_external" href="http://docs.oracle.com/javase/1.5.0/docs/api/java/nio/ByteBuffer.html#allocateDirect(int)">ByteBuffer.allocateDirect(int)</a>.
      </div></div><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_3" href="#st200_fn_3_ref">3</a>]</div><div class="st200_footnote_body">
        Typically, the <a class="st200_link_external" href="http://opengl.org">OpenGL</a> API.
      </div></div><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_4" href="#st200_fn_4_ref">4</a>]</div><div class="st200_footnote_body">
        The convention used by most programs using the <a class="st200_link_external" href="http://opengl.org">OpenGL</a> API.
      </div></div><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_5" href="#st200_fn_5_ref">5</a>]</div><div class="st200_footnote_body">
        See <a class="st200_link_external" href="http://mathfor3dgameprogramming.com">Mathematics
        for 3D Game Programming and Computer
        Graphics</a> 3rd Edition, section 4.3.1 for the
        derivation.
      </div></div><div class="st200_footnote_container"><div class="st200_footnote_number">[<a id="st200_fn_6" href="#st200_fn_6_ref">6</a>]</div><div class="st200_footnote_body">
        It is common for people to make mistakes with matrix multiplication:
        The order of matrices is effectively the reverse of the order in which
        the transforms will be applied.
      </div></div></div></div></body></html>
