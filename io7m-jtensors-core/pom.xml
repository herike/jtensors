<?xml version="1.0" encoding="UTF-8"?>
<project
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://maven.apache.org/POM/4.0.0"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.io7m.jtensors</groupId>
    <artifactId>io7m-jtensors</artifactId>
    <version>7.2.0-SNAPSHOT</version>
  </parent>
  <artifactId>io7m-jtensors-core</artifactId>

  <packaging>bundle</packaging>
  <description>Vector/matrix math package (Core)</description>
  <url>http://io7m.github.io/jtensors/</url>
  <name>${project.artifactId}</name>

  <dependencies>
    <dependency>
      <groupId>com.io7m.jequality</groupId>
      <artifactId>io7m-jequality-core</artifactId>
    </dependency>
    <dependency>
      <groupId>com.io7m.jfunctional</groupId>
      <artifactId>io7m-jfunctional-core</artifactId>
    </dependency>
    <dependency>
      <groupId>com.io7m.jintegers</groupId>
      <artifactId>io7m-jintegers-core</artifactId>
    </dependency>
    <dependency>
      <groupId>com.io7m.jnull</groupId>
      <artifactId>io7m-jnull-core</artifactId>
    </dependency>
    <dependency>
      <groupId>com.io7m.junreachable</groupId>
      <artifactId>io7m-junreachable-core</artifactId>
    </dependency>
    <dependency>
      <groupId>com.io7m.jcip</groupId>
      <artifactId>jcip-annotations</artifactId>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- Generate sources -->
      <plugin>
        <groupId>com.webguys</groupId>
        <artifactId>string-template-maven-plugin</artifactId>
        <executions>

          <!-- Unparameterized mutable vector types -->

          <execution>
            <id>generate-vector-M4L</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>render</goal>
            </goals>
            <configuration>
              <templates>
                <template>
                  <directory>src/main/string-template</directory>
                  <name>VectorM4</name>
                  <target>${project.build.directory}/generated-sources/string-template/com/io7m/jtensors/VectorM4L.java</target>
                  <properties>
                    <scalarType>long</scalarType>
                    <scalarTypeSuffix>L</scalarTypeSuffix>
                    <scalarLargeType>long</scalarLargeType>
                    <scalarDotType>long</scalarDotType>
                    <scalarClampBoundType>long</scalarClampBoundType>
                    <scalarDistanceType>long</scalarDistanceType>
                    <scalarScaleType>double</scalarScaleType>
                    <scalarDeprecatedScaleType>long</scalarDeprecatedScaleType>
                    <hasDeprecatedScale>true</hasDeprecatedScale>
                    <hasPartialArithmetic>true</hasPartialArithmetic>
                    <approximateEqualityType>none</approximateEqualityType>
                    <className>VectorM4L</className>
                    <classBaseType>Vector4LType</classBaseType>
                    <classReadableName4>VectorReadable4LType</classReadableName4>
                    <classReadableName3>VectorReadable3LType</classReadableName3>
                    <classReadableName2>VectorReadable2LType</classReadableName2>
                    <classWritableName>VectorWritable4LType</classWritableName>
                    <opClass>VectorLOps</opClass>
                    <since>5.3.0</since>
                  </properties>
                </template>
              </templates>
            </configuration>
          </execution>

          <execution>
            <id>generate-vector-M4I</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>render</goal>
            </goals>
            <configuration>
              <templates>
                <template>
                  <directory>src/main/string-template</directory>
                  <name>VectorM4</name>
                  <target>${project.build.directory}/generated-sources/string-template/com/io7m/jtensors/VectorM4I.java</target>
                  <properties>
                    <scalarType>int</scalarType>
                    <scalarTypeSuffix>I</scalarTypeSuffix>
                    <scalarLargeType>long</scalarLargeType>
                    <scalarDotType>int</scalarDotType>
                    <scalarClampBoundType>int</scalarClampBoundType>
                    <scalarDistanceType>int</scalarDistanceType>
                    <scalarScaleType>double</scalarScaleType>
                    <hasDeprecatedScale>true</hasDeprecatedScale>
                    <scalarDeprecatedScaleType>int</scalarDeprecatedScaleType>
                    <hasPartialArithmetic>true</hasPartialArithmetic>
                    <approximateEqualityType>none</approximateEqualityType>
                    <className>VectorM4I</className>
                    <classBaseType>Vector4IType</classBaseType>
                    <classReadableName4>VectorReadable4IType</classReadableName4>
                    <classReadableName3>VectorReadable3IType</classReadableName3>
                    <classReadableName2>VectorReadable2IType</classReadableName2>
                    <classWritableName>VectorWritable4IType</classWritableName>
                    <opClass>VectorIOps</opClass>
                    <since>5.3.0</since>
                  </properties>
                </template>
              </templates>
            </configuration>
          </execution>

          <execution>
            <id>generate-vector-M4D</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>render</goal>
            </goals>
            <configuration>
              <templates>
                <template>
                  <directory>src/main/string-template</directory>
                  <name>VectorM4</name>
                  <target>${project.build.directory}/generated-sources/string-template/com/io7m/jtensors/VectorM4D.java</target>
                  <properties>
                    <scalarType>double</scalarType>
                    <scalarTypeSuffix>D</scalarTypeSuffix>
                    <scalarLargeType>double</scalarLargeType>
                    <scalarDotType>double</scalarDotType>
                    <scalarClampBoundType>double</scalarClampBoundType>
                    <scalarScaleType>double</scalarScaleType>
                    <scalarDistanceType>double</scalarDistanceType>
                    <hasFloatingPoint>true</hasFloatingPoint>
                    <hasApproximateEquality>true</hasApproximateEquality>
                    <scalarDeprecatedScaleType>none</scalarDeprecatedScaleType>
                    <approximateEqualityType>com.io7m.jequality.AlmostEqualDouble</approximateEqualityType>
                    <className>VectorM4D</className>
                    <classBaseType>Vector4DType</classBaseType>
                    <classReadableName4>VectorReadable4DType</classReadableName4>
                    <classReadableName3>VectorReadable3DType</classReadableName3>
                    <classReadableName2>VectorReadable2DType</classReadableName2>
                    <classWritableName>VectorWritable4DType</classWritableName>
                    <opClass>VectorDOps</opClass>
                    <since>5.3.0</since>
                  </properties>
                </template>
              </templates>
            </configuration>
          </execution>

          <execution>
            <id>generate-vector-M4F</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>render</goal>
            </goals>
            <configuration>
              <templates>
                <template>
                  <directory>src/main/string-template</directory>
                  <name>VectorM4</name>
                  <target>${project.build.directory}/generated-sources/string-template/com/io7m/jtensors/VectorM4F.java</target>
                  <properties>
                    <scalarType>float</scalarType>
                    <scalarTypeSuffix>F</scalarTypeSuffix>
                    <scalarLargeType>double</scalarLargeType>
                    <scalarDotType>double</scalarDotType>
                    <scalarClampBoundType>double</scalarClampBoundType>
                    <scalarScaleType>double</scalarScaleType>
                    <scalarDistanceType>double</scalarDistanceType>
                    <hasFloatingPoint>true</hasFloatingPoint>
                    <hasApproximateEquality>true</hasApproximateEquality>
                    <scalarDeprecatedScaleType>none</scalarDeprecatedScaleType>
                    <approximateEqualityType>com.io7m.jequality.AlmostEqualFloat</approximateEqualityType>
                    <className>VectorM4F</className>
                    <classBaseType>Vector4FType</classBaseType>
                    <classReadableName4>VectorReadable4FType</classReadableName4>
                    <classReadableName3>VectorReadable3FType</classReadableName3>
                    <classReadableName2>VectorReadable2FType</classReadableName2>
                    <classWritableName>VectorWritable4FType</classWritableName>
                    <opClass>VectorFOps</opClass>
                    <since>5.3.0</since>
                  </properties>
                </template>
              </templates>
            </configuration>
          </execution>

          <execution>
            <id>generate-vector-M3L</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>render</goal>
            </goals>
            <configuration>
              <templates>
                <template>
                  <directory>src/main/string-template</directory>
                  <name>VectorM3</name>
                  <target>${project.build.directory}/generated-sources/string-template/com/io7m/jtensors/VectorM3L.java</target>
                  <properties>
                    <scalarType>long</scalarType>
                    <scalarTypeSuffix>L</scalarTypeSuffix>
                    <scalarLargeType>long</scalarLargeType>
                    <scalarDotType>long</scalarDotType>
                    <scalarClampBoundType>long</scalarClampBoundType>
                    <scalarDistanceType>long</scalarDistanceType>
                    <scalarScaleType>double</scalarScaleType>
                    <scalarDeprecatedScaleType>long</scalarDeprecatedScaleType>
                    <hasDeprecatedScale>true</hasDeprecatedScale>
                    <hasPartialArithmetic>true</hasPartialArithmetic>
                    <approximateEqualityType>none</approximateEqualityType>
                    <className>VectorM3L</className>
                    <classBaseType>Vector3LType</classBaseType>
                    <classReadableName3>VectorReadable3LType</classReadableName3>
                    <classReadableName2>VectorReadable2LType</classReadableName2>
                    <classWritableName>VectorWritable3LType</classWritableName>
                    <opClass>VectorLOps</opClass>
                    <since>5.3.0</since>
                  </properties>
                </template>
              </templates>
            </configuration>
          </execution>

          <execution>
            <id>generate-vector-M3I</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>render</goal>
            </goals>
            <configuration>
              <templates>
                <template>
                  <directory>src/main/string-template</directory>
                  <name>VectorM3</name>
                  <target>${project.build.directory}/generated-sources/string-template/com/io7m/jtensors/VectorM3I.java</target>
                  <properties>
                    <scalarType>int</scalarType>
                    <scalarTypeSuffix>I</scalarTypeSuffix>
                    <scalarLargeType>long</scalarLargeType>
                    <scalarDotType>int</scalarDotType>
                    <scalarClampBoundType>int</scalarClampBoundType>
                    <scalarDistanceType>int</scalarDistanceType>
                    <scalarScaleType>double</scalarScaleType>
                    <hasDeprecatedScale>true</hasDeprecatedScale>
                    <scalarDeprecatedScaleType>int</scalarDeprecatedScaleType>
                    <hasPartialArithmetic>true</hasPartialArithmetic>
                    <approximateEqualityType>none</approximateEqualityType>
                    <className>VectorM3I</className>
                    <classBaseType>Vector3IType</classBaseType>
                    <classReadableName3>VectorReadable3IType</classReadableName3>
                    <classReadableName2>VectorReadable2IType</classReadableName2>
                    <classWritableName>VectorWritable3IType</classWritableName>
                    <opClass>VectorIOps</opClass>
                    <since>5.3.0</since>
                  </properties>
                </template>
              </templates>
            </configuration>
          </execution>

          <execution>
            <id>generate-vector-M3D</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>render</goal>
            </goals>
            <configuration>
              <templates>
                <template>
                  <directory>src/main/string-template</directory>
                  <name>VectorM3</name>
                  <target>${project.build.directory}/generated-sources/string-template/com/io7m/jtensors/VectorM3D.java</target>
                  <properties>
                    <scalarType>double</scalarType>
                    <scalarTypeSuffix>D</scalarTypeSuffix>
                    <scalarLargeType>double</scalarLargeType>
                    <scalarDotType>double</scalarDotType>
                    <scalarClampBoundType>double</scalarClampBoundType>
                    <scalarScaleType>double</scalarScaleType>
                    <scalarDistanceType>double</scalarDistanceType>
                    <hasFloatingPoint>true</hasFloatingPoint>
                    <hasApproximateEquality>true</hasApproximateEquality>
                    <scalarDeprecatedScaleType>none</scalarDeprecatedScaleType>
                    <approximateEqualityType>com.io7m.jequality.AlmostEqualDouble</approximateEqualityType>
                    <className>VectorM3D</className>
                    <classBaseType>Vector3DType</classBaseType>
                    <classReadableName3>VectorReadable3DType</classReadableName3>
                    <classReadableName2>VectorReadable2DType</classReadableName2>
                    <classWritableName>VectorWritable3DType</classWritableName>
                    <opClass>VectorDOps</opClass>
                    <since>5.3.0</since>
                  </properties>
                </template>
              </templates>
            </configuration>
          </execution>

          <execution>
            <id>generate-vector-M3F</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>render</goal>
            </goals>
            <configuration>
              <templates>
                <template>
                  <directory>src/main/string-template</directory>
                  <name>VectorM3</name>
                  <target>${project.build.directory}/generated-sources/string-template/com/io7m/jtensors/VectorM3F.java</target>
                  <properties>
                    <scalarType>float</scalarType>
                    <scalarTypeSuffix>F</scalarTypeSuffix>
                    <scalarLargeType>double</scalarLargeType>
                    <scalarDotType>double</scalarDotType>
                    <scalarClampBoundType>double</scalarClampBoundType>
                    <scalarScaleType>double</scalarScaleType>
                    <scalarDistanceType>double</scalarDistanceType>
                    <hasFloatingPoint>true</hasFloatingPoint>
                    <hasApproximateEquality>true</hasApproximateEquality>
                    <scalarDeprecatedScaleType>none</scalarDeprecatedScaleType>
                    <hasDeprecatedMagnitude>true</hasDeprecatedMagnitude>
                    <scalarDeprecatedMagnitudeType>float</scalarDeprecatedMagnitudeType>
                    <hasDeprecatedClamp>true</hasDeprecatedClamp>
                    <scalarDeprecatedClampType>float</scalarDeprecatedClampType>
                    <approximateEqualityType>com.io7m.jequality.AlmostEqualFloat</approximateEqualityType>
                    <className>VectorM3F</className>
                    <classBaseType>Vector3FType</classBaseType>
                    <classReadableName3>VectorReadable3FType</classReadableName3>
                    <classReadableName2>VectorReadable2FType</classReadableName2>
                    <classWritableName>VectorWritable3FType</classWritableName>
                    <opClass>VectorFOps</opClass>
                    <since>5.3.0</since>
                  </properties>
                </template>
              </templates>
            </configuration>
          </execution>

          <execution>
            <id>generate-vector-M2L</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>render</goal>
            </goals>
            <configuration>
              <templates>
                <template>
                  <directory>src/main/string-template</directory>
                  <name>VectorM2</name>
                  <target>${project.build.directory}/generated-sources/string-template/com/io7m/jtensors/VectorM2L.java</target>
                  <properties>
                    <scalarType>long</scalarType>
                    <scalarTypeSuffix>L</scalarTypeSuffix>
                    <scalarLargeType>long</scalarLargeType>
                    <scalarDotType>long</scalarDotType>
                    <scalarClampBoundType>long</scalarClampBoundType>
                    <scalarDistanceType>long</scalarDistanceType>
                    <scalarScaleType>double</scalarScaleType>
                    <scalarDeprecatedScaleType>long</scalarDeprecatedScaleType>
                    <hasDeprecatedScale>true</hasDeprecatedScale>
                    <hasPartialArithmetic>true</hasPartialArithmetic>
                    <approximateEqualityType>none</approximateEqualityType>
                    <className>VectorM2L</className>
                    <classBaseType>Vector2LType</classBaseType>
                    <classReadableName2>VectorReadable2LType</classReadableName2>
                    <classWritableName>VectorWritable2LType</classWritableName>
                    <opClass>VectorLOps</opClass>
                    <since>5.3.0</since>
                  </properties>
                </template>
              </templates>
            </configuration>
          </execution>

          <execution>
            <id>generate-vector-M2I</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>render</goal>
            </goals>
            <configuration>
              <templates>
                <template>
                  <directory>src/main/string-template</directory>
                  <name>VectorM2</name>
                  <target>${project.build.directory}/generated-sources/string-template/com/io7m/jtensors/VectorM2I.java</target>
                  <properties>
                    <scalarType>int</scalarType>
                    <scalarTypeSuffix>I</scalarTypeSuffix>
                    <scalarLargeType>long</scalarLargeType>
                    <scalarDotType>int</scalarDotType>
                    <scalarClampBoundType>int</scalarClampBoundType>
                    <scalarDistanceType>int</scalarDistanceType>
                    <scalarScaleType>double</scalarScaleType>
                    <hasDeprecatedScale>true</hasDeprecatedScale>
                    <scalarDeprecatedScaleType>int</scalarDeprecatedScaleType>
                    <hasPartialArithmetic>true</hasPartialArithmetic>
                    <approximateEqualityType>none</approximateEqualityType>
                    <className>VectorM2I</className>
                    <classBaseType>Vector2IType</classBaseType>
                    <classReadableName2>VectorReadable2IType</classReadableName2>
                    <classWritableName>VectorWritable2IType</classWritableName>
                    <opClass>VectorIOps</opClass>
                    <since>5.3.0</since>
                  </properties>
                </template>
              </templates>
            </configuration>
          </execution>

          <execution>
            <id>generate-vector-M2D</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>render</goal>
            </goals>
            <configuration>
              <templates>
                <template>
                  <directory>src/main/string-template</directory>
                  <name>VectorM2</name>
                  <target>${project.build.directory}/generated-sources/string-template/com/io7m/jtensors/VectorM2D.java</target>
                  <properties>
                    <scalarType>double</scalarType>
                    <scalarTypeSuffix>D</scalarTypeSuffix>
                    <scalarLargeType>double</scalarLargeType>
                    <scalarDotType>double</scalarDotType>
                    <scalarClampBoundType>double</scalarClampBoundType>
                    <scalarScaleType>double</scalarScaleType>
                    <scalarDistanceType>double</scalarDistanceType>
                    <hasFloatingPoint>true</hasFloatingPoint>
                    <hasApproximateEquality>true</hasApproximateEquality>
                    <scalarDeprecatedScaleType>none</scalarDeprecatedScaleType>
                    <approximateEqualityType>com.io7m.jequality.AlmostEqualDouble</approximateEqualityType>
                    <className>VectorM2D</className>
                    <classBaseType>Vector2DType</classBaseType>
                    <classReadableName2>VectorReadable2DType</classReadableName2>
                    <classWritableName>VectorWritable2DType</classWritableName>
                    <opClass>VectorDOps</opClass>
                    <since>5.3.0</since>
                  </properties>
                </template>
              </templates>
            </configuration>
          </execution>

          <execution>
            <id>generate-vector-M2F</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>render</goal>
            </goals>
            <configuration>
              <templates>
                <template>
                  <directory>src/main/string-template</directory>
                  <name>VectorM2</name>
                  <target>${project.build.directory}/generated-sources/string-template/com/io7m/jtensors/VectorM2F.java</target>
                  <properties>
                    <scalarType>float</scalarType>
                    <scalarTypeSuffix>F</scalarTypeSuffix>
                    <scalarLargeType>double</scalarLargeType>
                    <scalarDotType>float</scalarDotType>
                    <scalarClampBoundType>double</scalarClampBoundType>
                    <scalarScaleType>double</scalarScaleType>
                    <scalarDistanceType>double</scalarDistanceType>
                    <hasFloatingPoint>true</hasFloatingPoint>
                    <hasApproximateEquality>true</hasApproximateEquality>
                    <scalarDeprecatedScaleType>none</scalarDeprecatedScaleType>
                    <hasDeprecatedClamp>true</hasDeprecatedClamp>
                    <scalarDeprecatedClampType>float</scalarDeprecatedClampType>
                    <hasDeprecatedDot>true</hasDeprecatedDot>
                    <scalarDeprecatedDotType>float</scalarDeprecatedDotType>
                    <approximateEqualityType>com.io7m.jequality.AlmostEqualFloat</approximateEqualityType>
                    <className>VectorM2F</className>
                    <classBaseType>Vector2FType</classBaseType>
                    <classReadableName2>VectorReadable2FType</classReadableName2>
                    <classWritableName>VectorWritable2FType</classWritableName>
                    <opClass>VectorFOps</opClass>
                    <since>5.3.0</since>
                  </properties>
                </template>
              </templates>
            </configuration>
          </execution>

          <!-- Parameterized mutable vector types -->

          <execution>
            <id>generate-vector-PM4L</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>render</goal>
            </goals>
            <configuration>
              <templates>
                <template>
                  <directory>src/main/string-template</directory>
                  <name>PVectorM4</name>
                  <target>${project.build.directory}/generated-sources/string-template/com/io7m/jtensors/parameterized/PVectorM4L.java</target>
                  <properties>
                    <scalarType>long</scalarType>
                    <scalarTypeSuffix>L</scalarTypeSuffix>
                    <scalarLargeType>long</scalarLargeType>
                    <scalarDotType>long</scalarDotType>
                    <scalarClampBoundType>long</scalarClampBoundType>
                    <scalarDistanceType>long</scalarDistanceType>
                    <scalarScaleType>double</scalarScaleType>
                    <scalarDeprecatedScaleType>long</scalarDeprecatedScaleType>
                    <hasDeprecatedScale>true</hasDeprecatedScale>
                    <hasPartialArithmetic>true</hasPartialArithmetic>
                    <approximateEqualityType>none</approximateEqualityType>
                    <className>PVectorM4L</className>
                    <classBaseType>PVector4LType</classBaseType>
                    <classReadableName4>PVectorReadable4LType</classReadableName4>
                    <classReadableUnparameterizedName4>com.io7m.jtensors.VectorReadable4LType</classReadableUnparameterizedName4>
                    <classReadableName3>PVectorReadable3LType</classReadableName3>
                    <classReadableUnparameterizedName3>com.io7m.jtensors.VectorReadable3LType</classReadableUnparameterizedName3>
                    <classReadableName2>PVectorReadable2LType</classReadableName2>
                    <classReadableUnparameterizedName2>com.io7m.jtensors.VectorReadable2LType</classReadableUnparameterizedName2>
                    <classWritableName>PVectorWritable4LType</classWritableName>
                    <opClass>PVectorLOps</opClass>
                    <since>7.0.0</since>
                  </properties>
                </template>
              </templates>
            </configuration>
          </execution>

          <execution>
            <id>generate-vector-PM4I</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>render</goal>
            </goals>
            <configuration>
              <templates>
                <template>
                  <directory>src/main/string-template</directory>
                  <name>PVectorM4</name>
                  <target>${project.build.directory}/generated-sources/string-template/com/io7m/jtensors/parameterized/PVectorM4I.java</target>
                  <properties>
                    <scalarType>int</scalarType>
                    <scalarTypeSuffix>I</scalarTypeSuffix>
                    <scalarLargeType>int</scalarLargeType>
                    <scalarDotType>int</scalarDotType>
                    <scalarClampBoundType>int</scalarClampBoundType>
                    <scalarDistanceType>int</scalarDistanceType>
                    <scalarScaleType>double</scalarScaleType>
                    <scalarDeprecatedScaleType>int</scalarDeprecatedScaleType>
                    <hasDeprecatedScale>true</hasDeprecatedScale>
                    <hasPartialArithmetic>true</hasPartialArithmetic>
                    <approximateEqualityType>none</approximateEqualityType>
                    <className>PVectorM4I</className>
                    <classBaseType>PVector4IType</classBaseType>
                    <classReadableName4>PVectorReadable4IType</classReadableName4>
                    <classReadableUnparameterizedName4>com.io7m.jtensors.VectorReadable4IType</classReadableUnparameterizedName4>
                    <classReadableName3>PVectorReadable3IType</classReadableName3>
                    <classReadableUnparameterizedName3>com.io7m.jtensors.VectorReadable3IType</classReadableUnparameterizedName3>
                    <classReadableName2>PVectorReadable2IType</classReadableName2>
                    <classReadableUnparameterizedName2>com.io7m.jtensors.VectorReadable2IType</classReadableUnparameterizedName2>
                    <classWritableName>PVectorWritable4IType</classWritableName>
                    <opClass>PVectorIOps</opClass>
                    <since>7.0.0</since>
                  </properties>
                </template>
              </templates>
            </configuration>
          </execution>

          <execution>
            <id>generate-vector-PM4D</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>render</goal>
            </goals>
            <configuration>
              <templates>
                <template>
                  <directory>src/main/string-template</directory>
                  <name>PVectorM4</name>
                  <target>${project.build.directory}/generated-sources/string-template/com/io7m/jtensors/parameterized/PVectorM4D.java</target>
                  <properties>
                    <scalarType>double</scalarType>
                    <scalarTypeSuffix>D</scalarTypeSuffix>
                    <scalarLargeType>double</scalarLargeType>
                    <scalarDotType>double</scalarDotType>
                    <scalarClampBoundType>double</scalarClampBoundType>
                    <scalarDistanceType>double</scalarDistanceType>
                    <scalarScaleType>double</scalarScaleType>
                    <scalarDeprecatedScaleType>double</scalarDeprecatedScaleType>
                    <hasFloatingPoint>true</hasFloatingPoint>
                    <hasApproximateEquality>true</hasApproximateEquality>
                    <approximateEqualityType>com.io7m.jequality.AlmostEqualDouble</approximateEqualityType>
                    <className>PVectorM4D</className>
                    <classBaseType>PVector4DType</classBaseType>
                    <classReadableName4>PVectorReadable4DType</classReadableName4>
                    <classReadableUnparameterizedName4>com.io7m.jtensors.VectorReadable4DType</classReadableUnparameterizedName4>
                    <classReadableName3>PVectorReadable3DType</classReadableName3>
                    <classReadableUnparameterizedName3>com.io7m.jtensors.VectorReadable3DType</classReadableUnparameterizedName3>
                    <classReadableName2>PVectorReadable2DType</classReadableName2>
                    <classReadableUnparameterizedName2>com.io7m.jtensors.VectorReadable2DType</classReadableUnparameterizedName2>
                    <classWritableName>PVectorWritable4DType</classWritableName>
                    <opClass>PVectorDOps</opClass>
                    <since>7.0.0</since>
                  </properties>
                </template>
              </templates>
            </configuration>
          </execution>

          <execution>
            <id>generate-vector-PM4F</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>render</goal>
            </goals>
            <configuration>
              <templates>
                <template>
                  <directory>src/main/string-template</directory>
                  <name>PVectorM4</name>
                  <target>${project.build.directory}/generated-sources/string-template/com/io7m/jtensors/parameterized/PVectorM4F.java</target>
                  <properties>
                    <scalarType>float</scalarType>
                    <scalarTypeSuffix>F</scalarTypeSuffix>
                    <scalarLargeType>double</scalarLargeType>
                    <scalarDotType>double</scalarDotType>
                    <scalarClampBoundType>double</scalarClampBoundType>
                    <scalarScaleType>double</scalarScaleType>
                    <scalarDistanceType>double</scalarDistanceType>
                    <hasFloatingPoint>true</hasFloatingPoint>
                    <hasApproximateEquality>true</hasApproximateEquality>
                    <scalarDeprecatedScaleType>none</scalarDeprecatedScaleType>
                    <approximateEqualityType>com.io7m.jequality.AlmostEqualFloat</approximateEqualityType>
                    <className>PVectorM4F</className>
                    <classBaseType>PVector4FType</classBaseType>
                    <classReadableName4>PVectorReadable4FType</classReadableName4>
                    <classReadableUnparameterizedName4>com.io7m.jtensors.VectorReadable4FType</classReadableUnparameterizedName4>
                    <classReadableName3>PVectorReadable3FType</classReadableName3>
                    <classReadableUnparameterizedName3>com.io7m.jtensors.VectorReadable3FType</classReadableUnparameterizedName3>
                    <classReadableName2>PVectorReadable2FType</classReadableName2>
                    <classReadableUnparameterizedName2>com.io7m.jtensors.VectorReadable2FType</classReadableUnparameterizedName2>
                    <classWritableName>PVectorWritable4FType</classWritableName>
                    <opClass>PVectorFOps</opClass>
                    <since>7.0.0</since>
                  </properties>
                </template>
              </templates>
            </configuration>
          </execution>

          <execution>
            <id>generate-vector-PM3L</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>render</goal>
            </goals>
            <configuration>
              <templates>
                <template>
                  <directory>src/main/string-template</directory>
                  <name>PVectorM3</name>
                  <target>${project.build.directory}/generated-sources/string-template/com/io7m/jtensors/parameterized/PVectorM3L.java</target>
                  <properties>
                    <scalarType>long</scalarType>
                    <scalarTypeSuffix>L</scalarTypeSuffix>
                    <scalarLargeType>long</scalarLargeType>
                    <scalarDotType>long</scalarDotType>
                    <scalarClampBoundType>long</scalarClampBoundType>
                    <scalarDistanceType>long</scalarDistanceType>
                    <scalarScaleType>double</scalarScaleType>
                    <scalarDeprecatedScaleType>long</scalarDeprecatedScaleType>
                    <hasDeprecatedScale>true</hasDeprecatedScale>
                    <hasPartialArithmetic>true</hasPartialArithmetic>
                    <approximateEqualityType>none</approximateEqualityType>
                    <className>PVectorM3L</className>
                    <classBaseType>PVector3LType</classBaseType>
                    <classReadableName3>PVectorReadable3LType</classReadableName3>
                    <classReadableUnparameterizedName3>com.io7m.jtensors.VectorReadable3LType</classReadableUnparameterizedName3>
                    <classReadableName2>PVectorReadable2LType</classReadableName2>
                    <classReadableUnparameterizedName2>com.io7m.jtensors.VectorReadable2LType</classReadableUnparameterizedName2>
                    <classWritableName>PVectorWritable3LType</classWritableName>
                    <opClass>PVectorLOps</opClass>
                    <since>7.0.0</since>
                  </properties>
                </template>
              </templates>
            </configuration>
          </execution>

          <execution>
            <id>generate-vector-PM3I</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>render</goal>
            </goals>
            <configuration>
              <templates>
                <template>
                  <directory>src/main/string-template</directory>
                  <name>PVectorM3</name>
                  <target>${project.build.directory}/generated-sources/string-template/com/io7m/jtensors/parameterized/PVectorM3I.java</target>
                  <properties>
                    <scalarType>int</scalarType>
                    <scalarTypeSuffix>I</scalarTypeSuffix>
                    <scalarLargeType>long</scalarLargeType>
                    <scalarDotType>int</scalarDotType>
                    <scalarClampBoundType>int</scalarClampBoundType>
                    <scalarDistanceType>int</scalarDistanceType>
                    <scalarScaleType>double</scalarScaleType>
                    <hasDeprecatedScale>true</hasDeprecatedScale>
                    <scalarDeprecatedScaleType>int</scalarDeprecatedScaleType>
                    <hasPartialArithmetic>true</hasPartialArithmetic>
                    <approximateEqualityType>none</approximateEqualityType>
                    <className>PVectorM3I</className>
                    <classBaseType>PVector3IType</classBaseType>
                    <classReadableName3>PVectorReadable3IType</classReadableName3>
                    <classReadableUnparameterizedName3>com.io7m.jtensors.VectorReadable3IType</classReadableUnparameterizedName3>
                    <classReadableName2>PVectorReadable2IType</classReadableName2>
                    <classReadableUnparameterizedName2>com.io7m.jtensors.VectorReadable2IType</classReadableUnparameterizedName2>
                    <classWritableName>PVectorWritable3IType</classWritableName>
                    <opClass>PVectorIOps</opClass>
                    <since>7.0.0</since>
                  </properties>
                </template>
              </templates>
            </configuration>
          </execution>

          <execution>
            <id>generate-vector-PM3D</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>render</goal>
            </goals>
            <configuration>
              <templates>
                <template>
                  <directory>src/main/string-template</directory>
                  <name>PVectorM3</name>
                  <target>${project.build.directory}/generated-sources/string-template/com/io7m/jtensors/parameterized/PVectorM3D.java</target>
                  <properties>
                    <scalarType>double</scalarType>
                    <scalarTypeSuffix>D</scalarTypeSuffix>
                    <scalarLargeType>double</scalarLargeType>
                    <scalarDotType>double</scalarDotType>
                    <scalarClampBoundType>double</scalarClampBoundType>
                    <scalarScaleType>double</scalarScaleType>
                    <scalarDistanceType>double</scalarDistanceType>
                    <hasFloatingPoint>true</hasFloatingPoint>
                    <hasApproximateEquality>true</hasApproximateEquality>
                    <approximateEqualityType>com.io7m.jequality.AlmostEqualDouble</approximateEqualityType>
                    <className>PVectorM3D</className>
                    <classBaseType>PVector3DType</classBaseType>
                    <classReadableName3>PVectorReadable3DType</classReadableName3>
                    <classReadableUnparameterizedName3>com.io7m.jtensors.VectorReadable3DType</classReadableUnparameterizedName3>
                    <classReadableName2>PVectorReadable2DType</classReadableName2>
                    <classReadableUnparameterizedName2>com.io7m.jtensors.VectorReadable2DType</classReadableUnparameterizedName2>
                    <classWritableName>PVectorWritable3DType</classWritableName>
                    <opClass>PVectorDOps</opClass>
                    <since>7.0.0</since>
                  </properties>
                </template>
              </templates>
            </configuration>
          </execution>

          <execution>
            <id>generate-vector-PM3F</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>render</goal>
            </goals>
            <configuration>
              <templates>
                <template>
                  <directory>src/main/string-template</directory>
                  <name>PVectorM3</name>
                  <target>${project.build.directory}/generated-sources/string-template/com/io7m/jtensors/parameterized/PVectorM3F.java</target>
                  <properties>
                    <scalarType>float</scalarType>
                    <scalarTypeSuffix>F</scalarTypeSuffix>
                    <scalarLargeType>double</scalarLargeType>
                    <scalarDotType>double</scalarDotType>
                    <scalarClampBoundType>double</scalarClampBoundType>
                    <scalarScaleType>double</scalarScaleType>
                    <scalarDistanceType>double</scalarDistanceType>
                    <hasFloatingPoint>true</hasFloatingPoint>
                    <hasApproximateEquality>true</hasApproximateEquality>
                    <scalarDeprecatedScaleType>none</scalarDeprecatedScaleType>
                    <hasDeprecatedMagnitude>true</hasDeprecatedMagnitude>
                    <scalarDeprecatedMagnitudeType>float</scalarDeprecatedMagnitudeType>
                    <hasDeprecatedClamp>true</hasDeprecatedClamp>
                    <scalarDeprecatedClampType>float</scalarDeprecatedClampType>
                    <approximateEqualityType>com.io7m.jequality.AlmostEqualFloat</approximateEqualityType>
                    <className>PVectorM3F</className>
                    <classBaseType>PVector3FType</classBaseType>
                    <classReadableName3>PVectorReadable3FType</classReadableName3>
                    <classReadableUnparameterizedName3>com.io7m.jtensors.VectorReadable3FType</classReadableUnparameterizedName3>
                    <classReadableName2>PVectorReadable2FType</classReadableName2>
                    <classReadableUnparameterizedName2>com.io7m.jtensors.VectorReadable2FType</classReadableUnparameterizedName2>
                    <classWritableName>PVectorWritable3FType</classWritableName>
                    <opClass>PVectorFOps</opClass>
                    <since>7.0.0</since>
                  </properties>
                </template>
              </templates>
            </configuration>
          </execution>

          <execution>
            <id>generate-vector-PM2L</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>render</goal>
            </goals>
            <configuration>
              <templates>
                <template>
                  <directory>src/main/string-template</directory>
                  <name>PVectorM2</name>
                  <target>${project.build.directory}/generated-sources/string-template/com/io7m/jtensors/parameterized/PVectorM2L.java</target>
                  <properties>
                    <scalarType>long</scalarType>
                    <scalarTypeSuffix>L</scalarTypeSuffix>
                    <scalarLargeType>long</scalarLargeType>
                    <scalarDotType>long</scalarDotType>
                    <scalarClampBoundType>long</scalarClampBoundType>
                    <scalarDistanceType>long</scalarDistanceType>
                    <scalarScaleType>double</scalarScaleType>
                    <scalarDeprecatedScaleType>long</scalarDeprecatedScaleType>
                    <hasDeprecatedScale>true</hasDeprecatedScale>
                    <hasPartialArithmetic>true</hasPartialArithmetic>
                    <approximateEqualityType>none</approximateEqualityType>
                    <className>PVectorM2L</className>
                    <classBaseType>PVector2LType</classBaseType>
                    <classReadableName2>PVectorReadable2LType</classReadableName2>
                    <classReadableUnparameterizedName2>com.io7m.jtensors.VectorReadable2LType</classReadableUnparameterizedName2>
                    <classWritableName>PVectorWritable2LType</classWritableName>
                    <opClass>PVectorLOps</opClass>
                    <since>7.0.0</since>
                  </properties>
                </template>
              </templates>
            </configuration>
          </execution>

          <execution>
            <id>generate-vector-PM2I</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>render</goal>
            </goals>
            <configuration>
              <templates>
                <template>
                  <directory>src/main/string-template</directory>
                  <name>PVectorM2</name>
                  <target>${project.build.directory}/generated-sources/string-template/com/io7m/jtensors/parameterized/PVectorM2I.java</target>
                  <properties>
                    <scalarType>int</scalarType>
                    <scalarTypeSuffix>I</scalarTypeSuffix>
                    <scalarLargeType>long</scalarLargeType>
                    <scalarDotType>int</scalarDotType>
                    <scalarClampBoundType>int</scalarClampBoundType>
                    <scalarDistanceType>long</scalarDistanceType>
                    <scalarScaleType>double</scalarScaleType>
                    <hasDeprecatedScale>true</hasDeprecatedScale>
                    <scalarDeprecatedScaleType>int</scalarDeprecatedScaleType>
                    <hasPartialArithmetic>true</hasPartialArithmetic>
                    <hasDeprecatedMagnitude>true</hasDeprecatedMagnitude>
                    <scalarDeprecatedMagnitudeType>int</scalarDeprecatedMagnitudeType>
                    <approximateEqualityType>none</approximateEqualityType>
                    <className>PVectorM2I</className>
                    <classBaseType>PVector2IType</classBaseType>
                    <classReadableName2>PVectorReadable2IType</classReadableName2>
                    <classReadableUnparameterizedName2>com.io7m.jtensors.VectorReadable2IType</classReadableUnparameterizedName2>
                    <classWritableName>PVectorWritable2IType</classWritableName>
                    <opClass>PVectorIOps</opClass>
                    <since>7.0.0</since>
                  </properties>
                </template>
              </templates>
            </configuration>
          </execution>

          <execution>
            <id>generate-vector-PM2D</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>render</goal>
            </goals>
            <configuration>
              <templates>
                <template>
                  <directory>src/main/string-template</directory>
                  <name>PVectorM2</name>
                  <target>${project.build.directory}/generated-sources/string-template/com/io7m/jtensors/parameterized/PVectorM2D.java</target>
                  <properties>
                    <scalarType>double</scalarType>
                    <scalarTypeSuffix>D</scalarTypeSuffix>
                    <scalarLargeType>double</scalarLargeType>
                    <scalarDotType>double</scalarDotType>
                    <scalarClampBoundType>double</scalarClampBoundType>
                    <scalarScaleType>double</scalarScaleType>
                    <scalarDistanceType>double</scalarDistanceType>
                    <hasFloatingPoint>true</hasFloatingPoint>
                    <hasApproximateEquality>true</hasApproximateEquality>
                    <approximateEqualityType>com.io7m.jequality.AlmostEqualDouble</approximateEqualityType>
                    <className>PVectorM2D</className>
                    <classBaseType>PVector2DType</classBaseType>
                    <classReadableName2>PVectorReadable2DType</classReadableName2>
                    <classReadableUnparameterizedName2>com.io7m.jtensors.VectorReadable2DType</classReadableUnparameterizedName2>
                    <classWritableName>PVectorWritable2DType</classWritableName>
                    <opClass>PVectorDOps</opClass>
                    <since>7.0.0</since>
                  </properties>
                </template>
              </templates>
            </configuration>
          </execution>

          <execution>
            <id>generate-vector-PM2F</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>render</goal>
            </goals>
            <configuration>
              <templates>
                <template>
                  <directory>src/main/string-template</directory>
                  <name>PVectorM2</name>
                  <target>${project.build.directory}/generated-sources/string-template/com/io7m/jtensors/parameterized/PVectorM2F.java</target>
                  <properties>
                    <scalarType>float</scalarType>
                    <scalarTypeSuffix>F</scalarTypeSuffix>
                    <scalarLargeType>double</scalarLargeType>
                    <scalarDotType>double</scalarDotType>
                    <scalarClampBoundType>double</scalarClampBoundType>
                    <scalarScaleType>double</scalarScaleType>
                    <scalarDistanceType>double</scalarDistanceType>
                    <hasFloatingPoint>true</hasFloatingPoint>
                    <hasApproximateEquality>true</hasApproximateEquality>
                    <hasDeprecatedDot>true</hasDeprecatedDot>
                    <scalarDeprecatedDotType>float</scalarDeprecatedDotType>
                    <hasDeprecatedScale>true</hasDeprecatedScale>
                    <scalarDeprecatedScaleType>float</scalarDeprecatedScaleType>
                    <hasDeprecatedClamp>true</hasDeprecatedClamp>
                    <scalarDeprecatedClampType>float</scalarDeprecatedClampType>
                    <approximateEqualityType>com.io7m.jequality.AlmostEqualFloat</approximateEqualityType>
                    <className>PVectorM2F</className>
                    <classBaseType>PVector2FType</classBaseType>
                    <classReadableName2>PVectorReadable2FType</classReadableName2>
                    <classReadableUnparameterizedName2>com.io7m.jtensors.VectorReadable2FType</classReadableUnparameterizedName2>
                    <classWritableName>PVectorWritable2FType</classWritableName>
                    <opClass>PVectorFOps</opClass>
                    <since>7.0.0</since>
                  </properties>
                </template>
              </templates>
            </configuration>
          </execution>

          <!-- Parameterized immutable vector types -->

          <execution>
            <id>generate-vector-PI4L</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>render</goal>
            </goals>
            <configuration>
              <templates>
                <template>
                  <directory>src/main/string-template</directory>
                  <name>PVectorI4</name>
                  <target>${project.build.directory}/generated-sources/string-template/com/io7m/jtensors/parameterized/PVectorI4L.java</target>
                  <properties>
                    <scalarType>long</scalarType>
                    <scalarTypeSuffix>L</scalarTypeSuffix>
                    <hasPartialArithmetic>true</hasPartialArithmetic>
                    <approximateEqualityType>none</approximateEqualityType>
                    <className>PVectorI4L</className>
                    <classBaseType>PVectorReadable4LType</classBaseType>
                    <classReadableName4>PVectorReadable4LType</classReadableName4>
                    <classReadableUnparameterizedName4>com.io7m.jtensors.VectorReadable4LType</classReadableUnparameterizedName4>
                    <classReadableName3>PVectorReadable3LType</classReadableName3>
                    <classReadableUnparameterizedName3>com.io7m.jtensors.VectorReadable3LType</classReadableUnparameterizedName3>
                    <classReadableName2>PVectorReadable2LType</classReadableName2>
                    <classReadableUnparameterizedName2>com.io7m.jtensors.VectorReadable2LType</classReadableUnparameterizedName2>
                    <opClass>PVectorLOps</opClass>
                    <since>7.0.0</since>
                  </properties>
                </template>
              </templates>
            </configuration>
          </execution>

        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
      </plugin>

      <!-- Produce OSGi bundle -->
      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <extensions>true</extensions>
        <configuration>
          <instructions>
            <Export-Package>
              com.io7m.jtensors,
              com.io7m.jtensors.parameterized
            </Export-Package>
          </instructions>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>
